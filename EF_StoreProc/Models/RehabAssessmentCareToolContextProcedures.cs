// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using EF_StoreProc.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace EF_StoreProc.Models
{
    public partial class RehabAssessmentCareToolContext
    {
        private IRehabAssessmentCareToolContextProcedures _procedures;

        public virtual IRehabAssessmentCareToolContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new RehabAssessmentCareToolContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IRehabAssessmentCareToolContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<sp_TreatingSpecialtiyPatientsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spQuestionAnswersResult>().HasNoKey().ToView(null);
        }
    }

    public partial class RehabAssessmentCareToolContextProcedures : IRehabAssessmentCareToolContextProcedures
    {
        private readonly RehabAssessmentCareToolContext _context;

        public RehabAssessmentCareToolContextProcedures(RehabAssessmentCareToolContext context)
        {
            _context = context;
        }

        public virtual async Task<List<sp_TreatingSpecialtiyPatientsResult>> sp_TreatingSpecialtiyPatientsAsync(string likeFacilityId, int? minusDays, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "likeFacilityId",
                    Size = 6,
                    Value = likeFacilityId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "minusDays",
                    Value = minusDays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_TreatingSpecialtiyPatientsResult>("EXEC @returnValue = [shared].[sp_TreatingSpecialtiyPatients] @likeFacilityId, @minusDays", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UserAccessLevelAsync(string userName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userName",
                    Size = 255,
                    Value = userName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [shared].[sp_UserAccessLevel] @userName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spQuestionAnswersResult>> spQuestionAnswersAsync(string facilityID6, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "facilityID6",
                    Size = 10,
                    Value = facilityID6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spQuestionAnswersResult>("EXEC @returnValue = [app].[spQuestionAnswers] @facilityID6", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
