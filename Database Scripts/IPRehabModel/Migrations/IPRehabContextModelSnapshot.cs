// <auto-generated />
using System;
using IPRehabModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IPRehab.Data.Migrations
{
    [DbContext(typeof(IPRehabContext))]
    partial class IPRehabContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("VHA20\\VHAPORSUNC")
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IPRehabModel.tblAnswer", b =>
                {
                    b.Property<int>("AnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerByUserID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("AnswerCodeSetFK")
                        .HasColumnType("int");

                    b.Property<int>("AnswerSequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("EpsideOfCareIDFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<int>("QuestionIDFK")
                        .HasColumnType("int");

                    b.Property<int>("StageIDFK")
                        .HasColumnType("int");

                    b.HasKey("AnswerID");

                    b.HasIndex("StageIDFK");

                    b.HasIndex(new[] { "EpsideOfCareIDFK", "QuestionIDFK", "AnswerCodeSetFK", "AnswerSequenceNumber" }, "IX_tblAnswer")
                        .IsUnique();

                    b.HasIndex(new[] { "AnswerCodeSetFK" }, "IX_tblAnswer_AnswerCodeSetFK");

                    b.HasIndex(new[] { "EpsideOfCareIDFK" }, "IX_tblAnswer_EpisodeOfCareIDFK");

                    b.HasIndex(new[] { "QuestionIDFK" }, "IX_tblAnswer_QuestionIDFK");

                    b.ToTable("tblAnswer", "app");
                });

            modelBuilder.Entity("IPRehabModel.tblCodeSet", b =>
                {
                    b.Property<int>("CodeSetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CodeDescription")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int?>("CodeSetParent")
                        .HasColumnType("int");

                    b.Property<string>("CodeValue")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("FyConstraint")
                        .HasColumnType("int");

                    b.Property<int?>("HierarchyType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("CodeSetID");

                    b.HasIndex(new[] { "CodeSetParent", "CodeValue" }, "IX_tblCodeSet")
                        .IsUnique()
                        .HasFilter("[CodeSetParent] IS NOT NULL");

                    b.ToTable("tblCodeSet", "app");
                });

            modelBuilder.Entity("IPRehabModel.tblEpisodeOfCare", b =>
                {
                    b.Property<int>("EpisodeOfCareID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("OnsetDate")
                        .HasColumnType("date");

                    b.Property<string>("PatientICNFK")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("EpisodeOfCareID")
                        .HasName("PK_app.tblEpisodeOfCare");

                    b.HasIndex("PatientICNFK");

                    b.ToTable("tblEpisodeOfCare", "app");
                });

            modelBuilder.Entity("IPRehabModel.tblPatient", b =>
                {
                    b.Property<string>("ICN")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("IEN")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Last4SSN")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ICN");

                    b.HasIndex(new[] { "LastName", "FirstName", "MiddleName", "Last4SSN" }, "IX_tblPatient_UniqueName")
                        .IsUnique()
                        .HasFilter("[MiddleName] IS NOT NULL");

                    b.ToTable("tblPatient", "app");
                });

            modelBuilder.Entity("IPRehabModel.tblQuestion", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AnswerCodeSetFK")
                        .HasColumnType("int");

                    b.Property<bool?>("BranchingPoint")
                        .HasColumnType("bit");

                    b.Property<string>("GroupTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("MultiChoice")
                        .HasColumnType("bit");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("QuestionKey")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("QuestionSection")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("QuestionID")
                        .HasName("PK_app.tblQuestion");

                    b.HasIndex("AnswerCodeSetFK");

                    b.HasIndex(new[] { "QuestionKey", "GroupTitle" }, "IX_tblQuestion")
                        .IsUnique()
                        .HasFilter("[GroupTitle] IS NOT NULL");

                    b.ToTable("tblQuestion", "app");
                });

            modelBuilder.Entity("IPRehabModel.tblQuestionInstruction", b =>
                {
                    b.Property<int>("InstructionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayLocation")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuestionIDFK")
                        .HasColumnType("int");

                    b.Property<int?>("StageCodeSetIDFK")
                        .HasColumnType("int");

                    b.HasKey("InstructionID")
                        .HasName("PK_tblInstruction");

                    b.HasIndex("StageCodeSetIDFK");

                    b.HasIndex(new[] { "QuestionIDFK", "Order" }, "IX_tblInstruction")
                        .IsUnique()
                        .HasFilter("[Order] IS NOT NULL");

                    b.ToTable("tblQuestionInstruction", "app");
                });

            modelBuilder.Entity("IPRehabModel.tblQuestionStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<int>("QuestionIDFK")
                        .HasColumnType("int");

                    b.Property<bool?>("Required")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<int>("StageFK")
                        .HasColumnType("int");

                    b.Property<string>("StageGroupTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "QuestionIDFK", "StageFK" }, "IX_tblQuestionStage")
                        .IsUnique();

                    b.HasIndex(new[] { "QuestionIDFK" }, "IX_tblQuestionStage_QuestionIdFk");

                    b.HasIndex(new[] { "StageFK" }, "IX_tblQuestionStage_StageFk");

                    b.ToTable("tblQuestionStage", "app");
                });

            modelBuilder.Entity("IPRehabModel.tblSignature", b =>
                {
                    b.Property<int>("EpisodeCareIDFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateInformationProvided")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Signature")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("binary(50)")
                        .IsFixedLength(true);

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("EpisodeCareIDFK");

                    b.HasIndex(new[] { "Signature" }, "IX_tblSignature")
                        .IsUnique();

                    b.ToTable("tblSignature", "app");
                });

            modelBuilder.Entity("IPRehabModel.tblUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("NetworkName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true);

                    b.HasKey("ID");

                    b.HasIndex(new[] { "LastName", "FirstName" }, "IX_tblUser_Name");

                    b.HasIndex(new[] { "NetworkName" }, "IX_tblUser_NetworkName")
                        .IsUnique();

                    b.ToTable("tblUser", "app");
                });

            modelBuilder.Entity("IPRehabModel.vCodeSetHierarchy", b =>
                {
                    b.Property<string>("ANCESTER_comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ANCESTER comment");

                    b.Property<int?>("ANCESTOR_ID")
                        .HasColumnType("int")
                        .HasColumnName("ANCESTOR ID");

                    b.Property<string>("ANCESTOR_description")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("ANCESTOR description");

                    b.Property<string>("ANCESTOR_value")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ANCESTOR value");

                    b.Property<int?>("ANTIQUITY_ID")
                        .HasColumnType("int")
                        .HasColumnName("ANTIQUITY ID");

                    b.Property<string>("ANTIQUITY_comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ANTIQUITY comment");

                    b.Property<string>("ANTIQUITY_description")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("ANTIQUITY description");

                    b.Property<string>("ANTIQUITY_value")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ANTIQUITY value");

                    b.Property<int>("CHILD_ID")
                        .HasColumnType("int")
                        .HasColumnName("CHILD ID");

                    b.Property<string>("CHILD_comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CHILD comment");

                    b.Property<string>("CHILD_description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("CHILD description");

                    b.Property<string>("CHILD_value")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CHILD value");

                    b.Property<int?>("GRAND_ID")
                        .HasColumnType("int")
                        .HasColumnName("GRAND ID");

                    b.Property<string>("GRAND_comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("GRAND comment");

                    b.Property<string>("GRAND_description")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("GRAND description");

                    b.Property<string>("GRAND_value")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("GRAND value");

                    b.Property<int?>("GREAT_ID")
                        .HasColumnType("int")
                        .HasColumnName("GREAT ID");

                    b.Property<string>("GREAT_comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("GREAT comment");

                    b.Property<string>("GREAT_description")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("GREAT description");

                    b.Property<string>("GREAT_value")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("GREAT value");

                    b.Property<string>("Hierarchy")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int?>("PARENT_ID")
                        .HasColumnType("int")
                        .HasColumnName("PARENT ID");

                    b.Property<string>("PARENT_comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PARENT comment");

                    b.Property<string>("PARENT_description")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("PARENT description");

                    b.Property<string>("PARENT_value")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("PARENT value");

                    b.ToView("vCodeSetHierarchy", "app");
                });

            modelBuilder.Entity("IPRehabModel.vQuestionStandardChoices", b =>
                {
                    b.Property<int?>("ANCESTOR_ID")
                        .HasColumnType("int")
                        .HasColumnName("ANCESTOR ID");

                    b.Property<string>("ANCESTOR_description")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("ANCESTOR description");

                    b.Property<string>("ANCESTOR_value")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ANCESTOR value");

                    b.Property<int?>("ANTIQUITY_ID")
                        .HasColumnType("int")
                        .HasColumnName("ANTIQUITY ID");

                    b.Property<string>("ANTIQUITY_description")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("ANTIQUITY description");

                    b.Property<string>("ANTIQUITY_value")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ANTIQUITY value");

                    b.Property<int>("AnswerCodeSetFK")
                        .HasColumnType("int");

                    b.Property<bool?>("BranchingPoint")
                        .HasColumnType("bit");

                    b.Property<int?>("CHILD_ID")
                        .HasColumnType("int")
                        .HasColumnName("CHILD ID");

                    b.Property<string>("CHILD_description")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("CHILD description");

                    b.Property<string>("CHILD_value")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CHILD value");

                    b.Property<string>("Form")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("FormFK")
                        .HasColumnType("int");

                    b.Property<int?>("FormSectionFK")
                        .HasColumnType("int");

                    b.Property<int?>("GRAND_ID")
                        .HasColumnType("int")
                        .HasColumnName("GRAND ID");

                    b.Property<string>("GRAND_description")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("GRAND description");

                    b.Property<string>("GRAND_value")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("GRAND value");

                    b.Property<int?>("GREAT_ID")
                        .HasColumnType("int")
                        .HasColumnName("GREAT ID");

                    b.Property<string>("GREAT_description")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("GREAT description");

                    b.Property<string>("GREAT_value")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("GREAT value");

                    b.Property<string>("GroupTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Hierarchy")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<bool?>("MultiChoice")
                        .HasColumnType("bit");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("PARENT_ID")
                        .HasColumnType("int")
                        .HasColumnName("PARENT ID");

                    b.Property<string>("PARENT_comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PARENT comment");

                    b.Property<string>("PARENT_description")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("PARENT description");

                    b.Property<string>("PARENT_value")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("PARENT value");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<string>("QuestionKey")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("QuestionTitle")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Section")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.ToView("vQuestionStandardChoices", "app");
                });

            modelBuilder.Entity("IPRehabModel.vQuestionStandardChoices_Condensed", b =>
                {
                    b.Property<string>("ANTIQUITY_Comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ANTIQUITY Comment");

                    b.Property<string>("Choice_Code")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Choice Code");

                    b.Property<int>("Code_Set")
                        .HasColumnType("int")
                        .HasColumnName("Code Set");

                    b.Property<string>("Code_Value_Comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Code Value Comment");

                    b.Property<string>("Form")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("GRAND_comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("GRAND comment");

                    b.Property<string>("GREAT_comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("GREAT comment");

                    b.Property<string>("PARENT_comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PARENT comment");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("QuestionKey")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Section")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Valid_Choice")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("Valid Choice");

                    b.Property<int?>("order")
                        .HasColumnType("int");

                    b.ToView("vQuestionStandardChoices_Condensed", "app");
                });

            modelBuilder.Entity("IPRehabModel.tblAnswer", b =>
                {
                    b.HasOne("IPRehabModel.tblCodeSet", "AnswerCodeSetFKNavigation")
                        .WithMany("tblAnswerAnswerCodeSetFKNavigation")
                        .HasForeignKey("AnswerCodeSetFK")
                        .HasConstraintName("FK_tblAnswer_tblCodeSet_AnswerCodeSet")
                        .IsRequired();

                    b.HasOne("IPRehabModel.tblEpisodeOfCare", "EpsideOfCareIDFKNavigation")
                        .WithMany("tblAnswer")
                        .HasForeignKey("EpsideOfCareIDFK")
                        .HasConstraintName("FK_tblAnswer_tblEpisodeOfCare")
                        .IsRequired();

                    b.HasOne("IPRehabModel.tblQuestion", "QuestionIDFKNavigation")
                        .WithMany("tblAnswer")
                        .HasForeignKey("QuestionIDFK")
                        .HasConstraintName("FK_tblAnswer_tblQuestion")
                        .IsRequired();

                    b.HasOne("IPRehabModel.tblCodeSet", "StageIDFKNavigation")
                        .WithMany("tblAnswerStageIDFKNavigation")
                        .HasForeignKey("StageIDFK")
                        .HasConstraintName("FK_tblAnswer_tblCodeSet_StageCodeSet")
                        .IsRequired();

                    b.Navigation("AnswerCodeSetFKNavigation");

                    b.Navigation("EpsideOfCareIDFKNavigation");

                    b.Navigation("QuestionIDFKNavigation");

                    b.Navigation("StageIDFKNavigation");
                });

            modelBuilder.Entity("IPRehabModel.tblCodeSet", b =>
                {
                    b.HasOne("IPRehabModel.tblCodeSet", "CodeSetParentNavigation")
                        .WithMany("InverseCodeSetParentNavigation")
                        .HasForeignKey("CodeSetParent")
                        .HasConstraintName("FK_tblCodeSet_tblCodeSet");

                    b.Navigation("CodeSetParentNavigation");
                });

            modelBuilder.Entity("IPRehabModel.tblEpisodeOfCare", b =>
                {
                    b.HasOne("IPRehabModel.tblPatient", "PatientICNFKNavigation")
                        .WithMany("tblEpisodeOfCare")
                        .HasForeignKey("PatientICNFK")
                        .HasConstraintName("FK_tblEpisodeOfCare_tblPatient")
                        .IsRequired();

                    b.Navigation("PatientICNFKNavigation");
                });

            modelBuilder.Entity("IPRehabModel.tblQuestion", b =>
                {
                    b.HasOne("IPRehabModel.tblCodeSet", "AnswerCodeSetFKNavigation")
                        .WithMany("tblQuestion")
                        .HasForeignKey("AnswerCodeSetFK")
                        .HasConstraintName("FK_tblQuestion_tblCodeSet")
                        .IsRequired();

                    b.Navigation("AnswerCodeSetFKNavigation");
                });

            modelBuilder.Entity("IPRehabModel.tblQuestionInstruction", b =>
                {
                    b.HasOne("IPRehabModel.tblQuestion", "QuestionIDFKNavigation")
                        .WithMany("tblQuestionInstruction")
                        .HasForeignKey("QuestionIDFK")
                        .HasConstraintName("FK_tblQuestionInstruction_tblQuestion")
                        .IsRequired();

                    b.HasOne("IPRehabModel.tblCodeSet", "StageCodeSetIDFKNavigation")
                        .WithMany("tblQuestionInstruction")
                        .HasForeignKey("StageCodeSetIDFK")
                        .HasConstraintName("FK_tblQuestionInstruction_tblCodeSet");

                    b.Navigation("QuestionIDFKNavigation");

                    b.Navigation("StageCodeSetIDFKNavigation");
                });

            modelBuilder.Entity("IPRehabModel.tblQuestionStage", b =>
                {
                    b.HasOne("IPRehabModel.tblQuestion", "QuestionIDFKNavigation")
                        .WithMany("tblQuestionStage")
                        .HasForeignKey("QuestionIDFK")
                        .HasConstraintName("FK_tblQuestionStage_tblQuestion")
                        .IsRequired();

                    b.HasOne("IPRehabModel.tblCodeSet", "StageFKNavigation")
                        .WithMany("tblQuestionStage")
                        .HasForeignKey("StageFK")
                        .HasConstraintName("FK_tblQuestionStage_tblCodeSet")
                        .IsRequired();

                    b.Navigation("QuestionIDFKNavigation");

                    b.Navigation("StageFKNavigation");
                });

            modelBuilder.Entity("IPRehabModel.tblSignature", b =>
                {
                    b.HasOne("IPRehabModel.tblEpisodeOfCare", "EpisodeCareIDFKNavigation")
                        .WithOne("tblSignature")
                        .HasForeignKey("IPRehabModel.tblSignature", "EpisodeCareIDFK")
                        .HasConstraintName("FK_tblSignature_tblEpisodeOfCare")
                        .IsRequired();

                    b.Navigation("EpisodeCareIDFKNavigation");
                });

            modelBuilder.Entity("IPRehabModel.tblCodeSet", b =>
                {
                    b.Navigation("InverseCodeSetParentNavigation");

                    b.Navigation("tblAnswerAnswerCodeSetFKNavigation");

                    b.Navigation("tblAnswerStageIDFKNavigation");

                    b.Navigation("tblQuestion");

                    b.Navigation("tblQuestionInstruction");

                    b.Navigation("tblQuestionStage");
                });

            modelBuilder.Entity("IPRehabModel.tblEpisodeOfCare", b =>
                {
                    b.Navigation("tblAnswer");

                    b.Navigation("tblSignature");
                });

            modelBuilder.Entity("IPRehabModel.tblPatient", b =>
                {
                    b.Navigation("tblEpisodeOfCare");
                });

            modelBuilder.Entity("IPRehabModel.tblQuestion", b =>
                {
                    b.Navigation("tblAnswer");

                    b.Navigation("tblQuestionInstruction");

                    b.Navigation("tblQuestionStage");
                });
#pragma warning restore 612, 618
        }
    }
}
