// <auto-generated />
using System;
using IPRehabModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IPRehab.Data.Migrations
{
    [DbContext(typeof(IPRehabContext))]
    [Migration("20210420213554_update Identity custom model")]
    partial class updateIdentitycustommodel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("app")
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IPRehabModel.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IPRehabModel.tblAnswer", b =>
                {
                    b.Property<int>("EpsideOfCareIdfk")
                        .HasColumnType("int")
                        .HasColumnName("EpsideOfCareIDFK");

                    b.Property<int>("AnswerCodeSetFk")
                        .HasColumnType("int")
                        .HasColumnName("AnswerCodeSetFK");

                    b.Property<int>("AnswerSequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("QuestionIdfk")
                        .HasColumnType("int")
                        .HasColumnName("QuestionIDFK");

                    b.HasKey("EpsideOfCareIdfk");

                    b.HasIndex(new[] { "EpsideOfCareIdfk", "QuestionIdfk", "AnswerCodeSetFk", "AnswerSequenceNumber" }, "IX_tblAnswer");

                    b.HasIndex(new[] { "AnswerCodeSetFk" }, "IX_tblAnswer_AnswerCodeSetFK");

                    b.HasIndex(new[] { "EpsideOfCareIdfk" }, "IX_tblAnswer_EpisodeOfCareIDFK");

                    b.HasIndex(new[] { "QuestionIdfk" }, "IX_tblAnswer_QuestionIDFK");

                    b.ToTable("tblAnswer", "app");
                });

            modelBuilder.Entity("IPRehabModel.tblCodeSet", b =>
                {
                    b.Property<int>("CodeSetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CodeSetID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CodeDescription")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int?>("CodeSetParent")
                        .HasColumnType("int");

                    b.Property<string>("CodeValue")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("FyConstraint")
                        .HasColumnType("int");

                    b.Property<int?>("HierarchyType")
                        .HasColumnType("int");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("CodeSetID");

                    b.HasIndex(new[] { "CodeSetParent", "CodeValue" }, "IX_tblCodeSet")
                        .IsUnique()
                        .HasFilter("[CodeSetParent] IS NOT NULL AND [CodeValue] IS NOT NULL");

                    b.ToTable("tblCodeSet", "app");
                });

            modelBuilder.Entity("IPRehabModel.tblEpisodeOfCare", b =>
                {
                    b.Property<int>("EpisodeOfCareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EpisodeOfCareID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("OnsetDate")
                        .HasColumnType("date");

                    b.Property<string>("PatientIcnfk")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PatientICNFK");

                    b.HasKey("EpisodeOfCareId")
                        .HasName("PK_app.tblEpisodeOfCare");

                    b.HasIndex("PatientIcnfk");

                    b.ToTable("tblEpisodeOfCare", "app");
                });

            modelBuilder.Entity("IPRehabModel.tblPatient", b =>
                {
                    b.Property<string>("Icn")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ICN");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Ien")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("IEN");

                    b.Property<string>("Last4Ssn")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("Last4SSN")
                        .IsFixedLength(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Icn");

                    b.HasIndex(new[] { "LastName", "FirstName", "MiddleName", "Last4Ssn" }, "IX_tblPatient_UniqueName")
                        .IsUnique()
                        .HasFilter("[LastName] IS NOT NULL AND [MiddleName] IS NOT NULL");

                    b.ToTable("tblPatient", "app");
                });

            modelBuilder.Entity("IPRehabModel.tblQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuestionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerCodeSetFk")
                        .HasColumnType("int")
                        .HasColumnName("AnswerCodeSetFK");

                    b.Property<bool?>("BranchingPoint")
                        .HasColumnType("bit");

                    b.Property<int>("FormFk")
                        .HasColumnType("int")
                        .HasColumnName("FormFK");

                    b.Property<int?>("FormSectionFk")
                        .HasColumnType("int")
                        .HasColumnName("FormSectionFK");

                    b.Property<string>("GroupTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("MultiChoice")
                        .HasColumnType("bit");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("QuestionKey")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("QuestionTitle")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("QuestionId")
                        .HasName("PK_app.tblQuestion");

                    b.HasIndex("AnswerCodeSetFk");

                    b.HasIndex("FormFk");

                    b.HasIndex("FormSectionFk");

                    b.HasIndex(new[] { "QuestionKey" }, "IX_tblQuestion_QuestionKey")
                        .IsUnique();

                    b.ToTable("tblQuestion", "app");
                });

            modelBuilder.Entity("IPRehabModel.tblQuestionInstruction", b =>
                {
                    b.Property<int>("InstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InstructionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuestionIdfk")
                        .HasColumnType("int")
                        .HasColumnName("QuestionIDFK");

                    b.HasKey("InstructionId")
                        .HasName("PK_tblInstruction");

                    b.HasIndex(new[] { "QuestionIdfk", "Order" }, "IX_tblInstruction")
                        .IsUnique()
                        .HasFilter("[Order] IS NOT NULL");

                    b.ToTable("tblQuestionInstruction", "app");
                });

            modelBuilder.Entity("IPRehabModel.tblSignature", b =>
                {
                    b.Property<int>("EpisodeCareIdfk")
                        .HasColumnType("int")
                        .HasColumnName("EpisodeCareIDFK");

                    b.Property<DateTime>("DateInformationProvided")
                        .HasColumnType("date");

                    b.Property<byte[]>("Signature")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("binary(50)")
                        .IsFixedLength(true);

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("EpisodeCareIdfk");

                    b.HasIndex(new[] { "Signature" }, "IX_tblSignature")
                        .IsUnique();

                    b.ToTable("tblSignature", "app");
                });

            modelBuilder.Entity("IPRehabModel.tblUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("tblUser", "app");
                });

            modelBuilder.Entity("IPRehabModel.VCodeSetHierarchy", b =>
                {
                    b.Property<string>("AncestorDescription")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("ANCESTOR description");

                    b.Property<int?>("AncestorId")
                        .HasColumnType("int")
                        .HasColumnName("ANCESTOR ID");

                    b.Property<string>("AncestorValue")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ANCESTOR value");

                    b.Property<string>("AntiquityDescription")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("ANTIQUITY description");

                    b.Property<int?>("AntiquityId")
                        .HasColumnType("int")
                        .HasColumnName("ANTIQUITY ID");

                    b.Property<string>("AntiquityValue")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ANTIQUITY value");

                    b.Property<string>("ChildDescription")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("CHILD description");

                    b.Property<int>("ChildId")
                        .HasColumnType("int")
                        .HasColumnName("CHILD ID");

                    b.Property<string>("ChildValue")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CHILD value");

                    b.Property<string>("GrandDescription")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("GRAND description");

                    b.Property<int?>("GrandId")
                        .HasColumnType("int")
                        .HasColumnName("GRAND ID");

                    b.Property<string>("GrandValue")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("GRAND value");

                    b.Property<string>("GreatDescription")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("GREAT description");

                    b.Property<int?>("GreatId")
                        .HasColumnType("int")
                        .HasColumnName("GREAT ID");

                    b.Property<string>("GreatValue")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("GREAT value");

                    b.Property<string>("Hierarchy")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("ParentComment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PARENT comment");

                    b.Property<string>("ParentDescription")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("PARENT description");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("PARENT ID");

                    b.Property<string>("ParentValue")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("PARENT value");

                    b.ToView("vCodeSetHierarchy", "app");
                });

            modelBuilder.Entity("IPRehabModel.VQuestionStandardChoices", b =>
                {
                    b.Property<string>("AncestorDescription")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("ANCESTOR description");

                    b.Property<int?>("AncestorId")
                        .HasColumnType("int")
                        .HasColumnName("ANCESTOR ID");

                    b.Property<string>("AncestorValue")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ANCESTOR value");

                    b.Property<int>("AnswerCodeSetFk")
                        .HasColumnType("int")
                        .HasColumnName("AnswerCodeSetFK");

                    b.Property<string>("AntiquityDescription")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("ANTIQUITY description");

                    b.Property<int?>("AntiquityId")
                        .HasColumnType("int")
                        .HasColumnName("ANTIQUITY ID");

                    b.Property<string>("AntiquityValue")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ANTIQUITY value");

                    b.Property<bool?>("BranchingPoint")
                        .HasColumnType("bit");

                    b.Property<string>("ChildDescription")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("CHILD description");

                    b.Property<int?>("ChildId")
                        .HasColumnType("int")
                        .HasColumnName("CHILD ID");

                    b.Property<string>("ChildValue")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CHILD value");

                    b.Property<int>("FormFk")
                        .HasColumnType("int")
                        .HasColumnName("FormFK");

                    b.Property<int?>("FormSectionFk")
                        .HasColumnType("int")
                        .HasColumnName("FormSectionFK");

                    b.Property<string>("GrandDescription")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("GRAND description");

                    b.Property<int?>("GrandId")
                        .HasColumnType("int")
                        .HasColumnName("GRAND ID");

                    b.Property<string>("GrandValue")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("GRAND value");

                    b.Property<string>("GreatDescription")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("GREAT description");

                    b.Property<int?>("GreatId")
                        .HasColumnType("int")
                        .HasColumnName("GREAT ID");

                    b.Property<string>("GreatValue")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("GREAT value");

                    b.Property<string>("GroupTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Hierarchy")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<bool?>("MultiChoice")
                        .HasColumnType("bit");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("ParentDescription")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("PARENT description");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("PARENT ID");

                    b.Property<string>("ParentValue")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("PARENT value");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.Property<string>("QuestionKey")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("QuestionTitle")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.ToView("vQuestionStandardChoices", "app");
                });

            modelBuilder.Entity("IPRehabModel.VQuestionStandardChoicesCondensed", b =>
                {
                    b.Property<string>("ChoiceCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Choice Code");

                    b.Property<int>("CodeSet")
                        .HasColumnType("int")
                        .HasColumnName("Code Set");

                    b.Property<string>("CodeSetComment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Code Set Comment");

                    b.Property<int?>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.Property<string>("QuestionKey")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ValidChoice")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("Valid Choice");

                    b.ToView("vQuestionStandardChoices_Condensed", "app");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IPRehabModel.tblAnswer", b =>
                {
                    b.HasOne("IPRehabModel.tblCodeSet", "AnswerCodeSetFkNavigation")
                        .WithMany("tblAnswer")
                        .HasForeignKey("AnswerCodeSetFk")
                        .HasConstraintName("FK_tblAnswer_tblCodeSet")
                        .IsRequired();

                    b.HasOne("IPRehabModel.tblEpisodeOfCare", "EpsideOfCareIdfkNavigation")
                        .WithOne("tblAnswer")
                        .HasForeignKey("IPRehabModel.tblAnswer", "EpsideOfCareIdfk")
                        .HasConstraintName("FK_tblAnswer_tblEpisodeOfCare")
                        .IsRequired();

                    b.HasOne("IPRehabModel.tblQuestion", "QuestionIdfkNavigation")
                        .WithMany("tblAnswer")
                        .HasForeignKey("QuestionIdfk")
                        .HasConstraintName("FK_tblAnswer_tblQuestion")
                        .IsRequired();

                    b.Navigation("AnswerCodeSetFkNavigation");

                    b.Navigation("EpsideOfCareIdfkNavigation");

                    b.Navigation("QuestionIdfkNavigation");
                });

            modelBuilder.Entity("IPRehabModel.tblCodeSet", b =>
                {
                    b.HasOne("IPRehabModel.tblCodeSet", "CodeSetParentNavigation")
                        .WithMany("InverseCodeSetParentNavigation")
                        .HasForeignKey("CodeSetParent")
                        .HasConstraintName("FK_tblCodeSet_tblCodeSet");

                    b.Navigation("CodeSetParentNavigation");
                });

            modelBuilder.Entity("IPRehabModel.tblEpisodeOfCare", b =>
                {
                    b.HasOne("IPRehabModel.tblPatient", "PatientIcnfkNavigation")
                        .WithMany("tblEpisodeOfCare")
                        .HasForeignKey("PatientIcnfk")
                        .HasConstraintName("FK_app.tblEpisodeOfCare_app.tblPatient")
                        .IsRequired();

                    b.Navigation("PatientIcnfkNavigation");
                });

            modelBuilder.Entity("IPRehabModel.tblQuestion", b =>
                {
                    b.HasOne("IPRehabModel.tblCodeSet", "AnswerCodeSetFkNavigation")
                        .WithMany("tblQuestionAnswerCodeSetFkNavigation")
                        .HasForeignKey("AnswerCodeSetFk")
                        .HasConstraintName("FK_Answer_CodeSet")
                        .IsRequired();

                    b.HasOne("IPRehabModel.tblCodeSet", "FormFkNavigation")
                        .WithMany("tblQuestionFormFkNavigation")
                        .HasForeignKey("FormFk")
                        .HasConstraintName("FK_Form_CodeSet")
                        .IsRequired();

                    b.HasOne("IPRehabModel.tblCodeSet", "FormSectionFkNavigation")
                        .WithMany("tblQuestionFormSectionFkNavigation")
                        .HasForeignKey("FormSectionFk")
                        .HasConstraintName("FK_Section_CodeSet");

                    b.Navigation("AnswerCodeSetFkNavigation");

                    b.Navigation("FormFkNavigation");

                    b.Navigation("FormSectionFkNavigation");
                });

            modelBuilder.Entity("IPRehabModel.tblQuestionInstruction", b =>
                {
                    b.HasOne("IPRehabModel.tblQuestion", "QuestionIdfkNavigation")
                        .WithMany("tblQuestionInstruction")
                        .HasForeignKey("QuestionIdfk")
                        .HasConstraintName("FK_tblInstruction_tblQuestion")
                        .IsRequired();

                    b.Navigation("QuestionIdfkNavigation");
                });

            modelBuilder.Entity("IPRehabModel.tblSignature", b =>
                {
                    b.HasOne("IPRehabModel.tblEpisodeOfCare", "EpisodeCareIdfkNavigation")
                        .WithOne("tblSignature")
                        .HasForeignKey("IPRehabModel.tblSignature", "EpisodeCareIdfk")
                        .HasConstraintName("FK_tblSignature_tblEpisodeOfCare")
                        .IsRequired();

                    b.Navigation("EpisodeCareIdfkNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IPRehabModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IPRehabModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IPRehabModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IPRehabModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IPRehabModel.tblCodeSet", b =>
                {
                    b.Navigation("InverseCodeSetParentNavigation");

                    b.Navigation("tblAnswer");

                    b.Navigation("tblQuestionAnswerCodeSetFkNavigation");

                    b.Navigation("tblQuestionFormFkNavigation");

                    b.Navigation("tblQuestionFormSectionFkNavigation");
                });

            modelBuilder.Entity("IPRehabModel.tblEpisodeOfCare", b =>
                {
                    b.Navigation("tblAnswer");

                    b.Navigation("tblSignature");
                });

            modelBuilder.Entity("IPRehabModel.tblPatient", b =>
                {
                    b.Navigation("tblEpisodeOfCare");
                });

            modelBuilder.Entity("IPRehabModel.tblQuestion", b =>
                {
                    b.Navigation("tblAnswer");

                    b.Navigation("tblQuestionInstruction");
                });
#pragma warning restore 612, 618
        }
    }
}
