// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace IPRehabModel
{
    public partial class IPRehabContext : DbContext
    {
        public IPRehabContext()
        {
        }

        public IPRehabContext(DbContextOptions<IPRehabContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<tblAnswer> tblAnswer { get; set; }
        public virtual DbSet<tblBranching> tblBranching { get; set; }
        public virtual DbSet<tblCodeSet> tblCodeSet { get; set; }
        public virtual DbSet<tblEpisodeOfCare> tblEpisodeOfCare { get; set; }
        public virtual DbSet<tblPatient> tblPatient { get; set; }
        public virtual DbSet<tblQuestion> tblQuestion { get; set; }
        public virtual DbSet<tblQuestionInstruction> tblQuestionInstruction { get; set; }
        public virtual DbSet<tblQuestionMeasure> tblQuestionMeasure { get; set; }
        public virtual DbSet<tblSignature> tblSignature { get; set; }
        public virtual DbSet<tblUser> tblUser { get; set; }
        public virtual DbSet<vTreatingSpecialtyRecent3Yrs> vTreatingSpecialtyRecent3Yrs { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasDefaultSchema("VHA20\\VHAPORSUNC");

            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedName] IS NOT NULL)");
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });
            });

            modelBuilder.Entity<AspNetUserTokens>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedUserName] IS NOT NULL)");

                entity.HasMany(d => d.Role)
                    .WithMany(p => p.User)
                    .UsingEntity<Dictionary<string, object>>(
                        "AspNetUserRoles",
                        l => l.HasOne<AspNetRoles>().WithMany().HasForeignKey("RoleId"),
                        r => r.HasOne<AspNetUsers>().WithMany().HasForeignKey("UserId"),
                        j =>
                        {
                            j.HasKey("UserId", "RoleId");

                            j.ToTable("AspNetUserRoles", "app");

                            j.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");
                        });
            });

            modelBuilder.Entity<tblAnswer>(entity =>
            {
                entity.HasIndex(e => new { e.EpsideOfCareIDFK, e.MeasureIDFK, e.AnswerCodeSetFK, e.AnswerSequenceNumber }, "IX_tblAnswer")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AnswerCodeSetFK, "IX_tblAnswer_AnswerCodeSetFK")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EpsideOfCareIDFK, "IX_tblAnswer_EpisodeOfCareIDFK")
                    .HasFillFactor(90);

                entity.HasOne(d => d.AnswerCodeSetFKNavigation)
                    .WithMany(p => p.tblAnswer)
                    .HasForeignKey(d => d.AnswerCodeSetFK)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAnswer_tblCodeSet_AnswerCodeSet");

                entity.HasOne(d => d.EpsideOfCareIDFKNavigation)
                    .WithMany(p => p.tblAnswer)
                    .HasForeignKey(d => d.EpsideOfCareIDFK)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAnswer_tblEpisodeOfCare");

                entity.HasOne(d => d.MeasureIDFKNavigation)
                    .WithMany(p => p.tblAnswer)
                    .HasForeignKey(d => d.MeasureIDFK)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAnswer_tblQuestionMeasure");

                entity.HasOne(d => d.QuestionIDFKNavigation)
                    .WithMany(p => p.tblAnswer)
                    .HasForeignKey(d => d.QuestionIDFK)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAnswer_tblQuestion");
            });

            modelBuilder.Entity<tblBranching>(entity =>
            {
                entity.HasOne(d => d.FromQuestion)
                    .WithMany(p => p.tblBranchingFromQuestion)
                    .HasForeignKey(d => d.FromQuestionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBranching_tblQuestion_From");

                entity.HasOne(d => d.ToQuestion)
                    .WithMany(p => p.tblBranchingToQuestion)
                    .HasForeignKey(d => d.ToQuestionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBranching_tblQuestion_To");
            });

            modelBuilder.Entity<tblCodeSet>(entity =>
            {
                entity.HasOne(d => d.CodeSetParentNavigation)
                    .WithMany(p => p.InverseCodeSetParentNavigation)
                    .HasForeignKey(d => d.CodeSetParent)
                    .HasConstraintName("FK_tblCodeSet_tblCodeSet");
            });

            modelBuilder.Entity<tblEpisodeOfCare>(entity =>
            {
                entity.HasKey(e => e.EpisodeOfCareID)
                    .HasName("PK_app.tblEpisodeOfCare");

                entity.Property(e => e.FacilityID6).IsFixedLength();
            });

            modelBuilder.Entity<tblPatient>(entity =>
            {
                entity.Property(e => e.Last4SSN).IsFixedLength();
            });

            modelBuilder.Entity<tblQuestion>(entity =>
            {
                entity.HasKey(e => e.QuestionID)
                    .HasName("PK_app.tblQuestion");

                entity.HasIndex(e => new { e.QuestionKey, e.GroupTitle }, "IX_tblQuestion")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasOne(d => d.AnswerCodeSetFKNavigation)
                    .WithMany(p => p.tblQuestion)
                    .HasForeignKey(d => d.AnswerCodeSetFK)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblQuestion_tblCodeSet");
            });

            modelBuilder.Entity<tblQuestionInstruction>(entity =>
            {
                entity.HasKey(e => e.InstructionID)
                    .HasName("PK_tblInstruction");

                entity.HasOne(d => d.DisplayLocationFKNavigation)
                    .WithMany(p => p.tblQuestionInstructionDisplayLocationFKNavigation)
                    .HasForeignKey(d => d.DisplayLocationFK)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblQuestionInstruction_tblCodeSet_DisplayLocation");

                entity.HasOne(d => d.QuestionIDFKNavigation)
                    .WithMany(p => p.tblQuestionInstruction)
                    .HasForeignKey(d => d.QuestionIDFK)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblQuestionInstruction_tblQuestion");

                entity.HasOne(d => d.StageCodeSetIDFKNavigation)
                    .WithMany(p => p.tblQuestionInstructionStageCodeSetIDFKNavigation)
                    .HasForeignKey(d => d.StageCodeSetIDFK)
                    .HasConstraintName("FK_tblQuestionInstruction_tblCodeSet_StageCode");
            });

            modelBuilder.Entity<tblQuestionMeasure>(entity =>
            {
                entity.Property(e => e.Required).HasDefaultValueSql("(CONVERT([bit],(0)))");

                entity.HasOne(d => d.MeasureCodeSetIDFKNavigation)
                    .WithMany(p => p.tblQuestionMeasureMeasureCodeSetIDFKNavigation)
                    .HasForeignKey(d => d.MeasureCodeSetIDFK)
                    .HasConstraintName("FK_tblQuestionMeasure_tblCodeSet1");

                entity.HasOne(d => d.QuestionIDFKNavigation)
                    .WithMany(p => p.tblQuestionMeasure)
                    .HasForeignKey(d => d.QuestionIDFK)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblQuestionMeasure_tblQuestion");

                entity.HasOne(d => d.StageFKNavigation)
                    .WithMany(p => p.tblQuestionMeasureStageFKNavigation)
                    .HasForeignKey(d => d.StageFK)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblQuestionMeasure_tblCodeSet");
            });

            modelBuilder.Entity<tblSignature>(entity =>
            {
                entity.Property(e => e.EpisodeCareIDFK).ValueGeneratedNever();

                entity.Property(e => e.Signature).IsFixedLength();

                entity.HasOne(d => d.EpisodeCareIDFKNavigation)
                    .WithOne(p => p.tblSignature)
                    .HasForeignKey<tblSignature>(d => d.EpisodeCareIDFK)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblSignature_tblEpisodeOfCare");
            });

            modelBuilder.Entity<tblUser>(entity =>
            {
                entity.Property(e => e.NetworkName).IsFixedLength();
            });

            modelBuilder.Entity<vTreatingSpecialtyRecent3Yrs>(entity =>
            {
                entity.ToView("vTreatingSpecialtyRecent3Yrs", "shared");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}