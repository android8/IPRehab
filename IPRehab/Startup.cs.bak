using Mailer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
<<<<<<< HEAD
=======
using Microsoft.AspNetCore.ResponseCompression;
>>>>>>> 5a2be59 (1. add webapi endpoint for ajax post of new episode)
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;
using System.Linq;
using System.Text.Json.Serialization;
using IEmailSender = Mailer.IEmailSender;

namespace IPRehab
{
  public class Startup
  {
    public IConfiguration Configuration { get; }
    public IWebHostEnvironment env { get; }

    public Startup(IConfiguration configuration, IWebHostEnvironment environment)
    {
      Configuration = configuration;
      env = environment;
    }


    // This method gets called by the runtime. Use this method to add services to the container.
    public void ConfigureServices(IServiceCollection services)
    {
      services.Configure<CookiePolicyOptions>(options =>
      {
        //https://docs.microsoft.com/en-us/aspnet/core/security/gdpr?view=aspnetcore-5.0

        // This lambda determines whether user consent for non-essential cookies is needed for a given request.
        options.CheckConsentNeeded = context => true; // true if consent required
        // requires using Microsoft.AspNetCore.Http;
        options.MinimumSameSitePolicy = SameSiteMode.None;
        options.ConsentCookie.Expiration = TimeSpan.FromMinutes(20);
      });

      services.AddSession(options =>
      {
        options.IdleTimeout = TimeSpan.FromMinutes(20);
        options.Cookie.HttpOnly = true;
        options.Cookie.IsEssential = true;
      });

      //services.AddDistributedMemoryCache(); //do not use because out of process 
      //services.AddMemoryCache(); //do not use because the server may not have the same DLL versions

      services.AddControllersWithViews().AddJsonOptions(o =>
      {
        o.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.Preserve; //preserve circular reference
      });

      // https://github.com/ligershark/WebOptimizer
      if (env.IsDevelopment())
      {
        /* no minification */
        services.AddWebOptimizer(minifyJavaScript: false, minifyCss: false);
      }
      else
      {
        services.AddWebOptimizer(pipeline =>
        {
          // Creates a CSS and a JS bundle. Globbing patterns supported.
          pipeline.AddScssBundle("/css/siteCssBundle.css", 
            new string[] { "css/**/site.css", "css/**/transition.css", "css/**/app.css" });

          pipeline.AddJavaScriptBundle("/js/siteJsBundle.js", 
            new string[] { "js/**/animateBanner.js", "js/**/cookieConsent.js"});

          pipeline.AddJavaScriptBundle("/js/patientBundle", 
            new string[] { "js/**/js/app/commandBtns.js", "js/**/patientList.js"});

          pipeline.AddJavaScriptBundle("/js/questionBundle.js", 
            new string[] { "js/**/ICommonUtility.js", "js/**/utility.js", "js/**/IAjaxPostbackModel.js", "js/**/ajaxPostbackModel.js", "js/**/IUserAnswer.js", "js/**/userAnswer.js", "js/**/branching.js", "js/**/form.js" });

          // This bundle uses source files from the Content Root and uses a custom PrependHeader extension
          //pipeline.AddJavaScriptBundle("/js/scripts.js", "scripts/a.js", "wwwroot/js/plus.js")
          //        .UseContentRoot()
          //        .PrependHeader("My custom header")
          //        .AddResponseHeader("x-test", "value");

          // This will minify any JS and CSS file that isn't part of any bundle
          pipeline.MinifyCssFiles();
          pipeline.MinifyJsFiles();

          // This will automatically compile any referenced .scss files
          pipeline.CompileScssFiles();

          // AddFiles/AddBundle allow for custom pipelines
          pipeline.AddBundle("/text.txt", "text/plain", "random/*.txt")
                  .AdjustRelativePaths()
                  .Concatenate()
                  .FingerprintUrls()
                  .MinifyCss();
        });
      }

      services.AddResponseCaching();
      services.AddRazorPages();

      services.AddSingleton<IMailerConfiguration, MailerConfiguration>();
      services.AddSingleton<Mailer.IEmailSender, EmailSender>();

      /* Implement ProblemDetailsFactory
        MVC uses Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory to produce all instances of ProblemDetails and ValidationProblemDetails. This includes client error responses, validation failure error responses, and the ControllerBase.Problem and ControllerBase.ValidationProblem helper methods.
       */
      /* https://stevenmaglio.blogspot.com/2019/12/create-custom-problemdetailsfactory.html */

      //services.AddTransient<ProblemDetailsFactory, CustomProblemDetailsFactory>();

      services.AddAntiforgery(options =>
      {
        options.HeaderName = "X-CSRF-TOKEN-IPREHAB";
        options.FormFieldName = "X-CSRF-TOKEN-IPREHAB";
        options.Cookie.Name = "X-CSRF-TOKEN-IPREHAB";
      });

      services.AddApplicationInsightsTelemetry();
    }

    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
    public void Configure(IApplicationBuilder app)
    {
      if (env.IsDevelopment())
      {
        app.UseDeveloperExceptionPage();
        //app.UseExceptionHandler("/error-local-development");
      }
      else
      {
        app.UseExceptionHandler("/Error");
        // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
        app.UseHsts();
      }
      
      app.UseHttpsRedirection();
      
      app.UseWebOptimizer();/* must be before UseStaticFiles() */
      
      app.UseStaticFiles();

      //https://docs.microsoft.com/en-us/aspnet/core/security/gdpr?view=aspnetcore-5.0
      app.UseCookiePolicy();

      app.UseRouting();

      //DB connection and Identty is handled in Areas.Identity.IdentityHostingStartup.cs
      
      app.UseAuthentication();
      app.UseAuthorization();

      app.UseSession(); //must be before UseMvc or UseEndpoints

      // UseCors must be called before UseResponseCaching
      // app.UseCors("myAllowSpecificOrigins");

      app.UseResponseCaching();

      app.Use(async (context, next) =>
      {
        context.Response.GetTypedHeaders().CacheControl =
            new Microsoft.Net.Http.Headers.CacheControlHeaderValue()
            {
              Public = true,
              MaxAge = TimeSpan.FromSeconds(10)
            };
        context.Response.Headers[Microsoft.Net.Http.Headers.HeaderNames.Vary] =
            new string[] { "Accept-Encoding" };

        await next();
      });

      app.UseEndpoints(endpoints =>
      {
        endpoints.MapControllerRoute(
                  name: "default",
                  pattern: "{controller=Home}/{action=Splash}");

        endpoints.MapRazorPages();
      });
    }
  }
}
