@model PatientTreatingSpecialtyListViewModel

@{
    ViewData["Title"] = Model.PageTitle;
}

@section VendorScripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<environment include="Production">
    @section MyScripts_block1_prod {
        <script type="module" src="~/js/patientBundle.min.js" asp-append-version="true" async></script>
        @*
    <script type="module" src="~/js/app/commandBtns.min.js" asp-append-version="true" async></script>
    <script type="module" src="~/js/app/patientList.min.js" asp-append-version="true" async></script>
    *@
    }
</environment>

<environment include="Development">
    @section MyScripts_block1_dev {
        <script type="module" src="~/js/app/commandBtns.js" asp-append-version="true" async></script>
        <script type="module" src="~/js/app/patientList.js" asp-append-version="true" async></script>
    }
</environment>

<div class="flex-start-column-nowrap">
    @{
        await Html.RenderPartialAsync("_SearchPartialTreatingSpecialty", Model);
    }
    <table class="table-responsive-md table-bordered patients">
        <thead>
            @*
            <tr>
            <td colspan="5" class="alert-danger">
            This page is cached. If it doesn't show the newly added episode, please press CTRL and F5 keys together to force page fresh.
            </td>
            </tr>
            *@
            <tr>
                <th></th>
                <th>
                    @Html.DisplayNameFor(model => model.Patients.First().Patient.Sta6a)
                </th>
                <th class="bedSection">
                    @Html.DisplayNameFor(model => model.Patients.First().Patient.Bedsecn)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Patients.First().Patient.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Patients.First().Patient.RealSSN)
                </th>
                @*
                <th>
                @Html.DisplayNameFor(model => model.Patients.First().Patient.PTFSSN)
                </th>
                <th>
                @Html.DisplayNameFor(model => model.Patients.First().Patient.PatientICN)
                </th>
                *@
            </tr>
        </thead>
        <tbody>
            @{
                int patientRowIndex = 0;
                foreach (var pat in Model.Patients)
                {
                    string blur = pat.Patient.RealSSN.Substring(0, pat.Patient.RealSSN.Length - 4);
                    string last4 = pat.Patient.RealSSN.Substring(pat.Patient.RealSSN.Length - 4);

                    <!--Patient row-->
                    <tr class="patientRow">
                        <td class="rowCounter">@(++patientRowIndex)</td>
                        <td>
                            @Html.DisplayFor(modelItem => pat.Patient.Sta6a)
                        </td>
                        <td class="bedSection">
                            @Html.DisplayFor(modelItem => pat.Patient.Bedsecn)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => pat.Patient.Name)
                        </td>
                        <td>
                            <span class="blurry">@blur</span>@last4
                            @*Html.DisplayFor(modelItem => pat.Patient.RealSSN.Substring(pat.Patient.RealSSN.Length-4))*@
                        </td>
                        @*
                <td>
                @Html.DisplayFor(modelItem => pat.Patient.PTFSSN)
                </td>
                <td>
                @Html.DisplayFor(modelItem => pat.Patient.PatientICN)
                </td>
                *@
                    </tr>
                    <!--Episode of Care row-->
                    @*if there the patient doesn't have any episode, there will be an null episode with rehab command collection'*@
                    <tr>
                        <td colspan="7">
                            <div class="flex-start-row-nowrap episode">
                                <table class="table-striped table-responsive-md">
                                    <thead>
                                        <tr>
                                            <th>
                                                <div>
                                                    <span class="episode-node-symbol">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                                                </div>
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(modelItem => pat.Patient.CareEpisodes.First().EpisodeOfCareID)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(modelItem => pat.Patient.CareEpisodes.First().AdmissionDate)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(modelItem => pat.Patient.CareEpisodes.First().OnsetDate)
                                            </th>
                                            <th>
                                                Completed
                                            </th>
                                            <th>@* stage command buttons view component controller *@</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            string newEpisodeBtnComponent = typeof(IPRehab.ViewComponents.StageCommandBtnViewComponent).Name.Replace("ViewComponent", string.Empty);
                                            string existingEpisodeBtnComponent = typeof(IPRehab.ViewComponents.StageCommandBtnViewComponent).Name.Replace("ViewComponent", string.Empty);
                                        }

                                        @foreach (var thisEpisodeConfig in pat.EpisodeBtnConfig)
                                        {
                                            if (thisEpisodeConfig.EpisodeOfCareID <= 0)
                                            {
                                                <tr>
                                                    <td>@*episode-node-symbol*@</td>
                                                    <td>&nbsp;</td>
                                                    <td>
                                                        <div class="flex-start-row-nowrap">@Html.DisplayFor(modelItem => thisEpisodeConfig.AdmissionDate)</div>
                                                    </td>
                                                    <td colspan="3">
                                                        <div class="flex-start-row-nowrap">
                                                            <div>
                                                                @* don't put the next component invocation inside a code block. It must be by itself starting @ sign. Otherwise, it won't render*@
                                                                @await Component.InvokeAsync(newEpisodeBtnComponent, new { EpisodeBtnconfig = thisEpisodeConfig })
                                                            </div>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                            else
                                            {
                                                <tr class="episode">
                                                    <td>@*episode-node-symbol*@</td>
                                                    <td>
                                                        <div class="flex-start-row-nowrap">@Html.DisplayFor(modelItem => thisEpisodeConfig.EpisodeOfCareID)</div>
                                                    </td>
                                                    <td>
                                                        <div class="flex-start-row-nowrap">@thisEpisodeConfig.AdmissionDate.ToString($"{0:MM/dd/yyyy}")</div>
                                                    </td>
                                                    <td>
                                                        <div class="flex-start-row-nowrap">@thisEpisodeConfig.OnsetDate.ToString($"{0:MM/dd/yyyy}")</div>
                                                    </td>
                                                    <td>
                                                        @{
                                                            if (thisEpisodeConfig.FormIsComplete)
                                                            {
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-check2" viewBox="0 0 16 16">
                                                                    <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0" />
                                                                </svg>
                                                            }
                                                        }
                                                    </td>
                                                    <td>
                                                        @* don't put the next component invocation inside a code block. It must be by itself starting @ sign. Otherwise, it won't render*@
                                                        <div class="flex-start-row-nowrap">
                                                            @await Component.InvokeAsync(existingEpisodeBtnComponent, new { EpisodeBtnconfig = thisEpisodeConfig })
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>