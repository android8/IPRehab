@model ViewComponentTemplateModel

@{
  AnswerDTO originalAnswer = null;
  ChoiceAndAnswer selectedItem = null;
  var thisChoiceAndAnswer = Model.ChoiceAndAnswerList.FirstOrDefault(x => x.Answer != null);
  if (thisChoiceAndAnswer != null)
  {
    if (thisChoiceAndAnswer.Answer != null)
    {
      originalAnswer = thisChoiceAndAnswer.Answer;
    }
  }
  bool displayStageHeader = Model.ViewComponentViewModel.DisplayStageHeader && !string.IsNullOrEmpty(Model.ViewComponentViewModel.StageTitle);
}

<div class="flex-start-column-nowrap">

  @*the labe is required by HTML5 specification*@
  <label for="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.StageTitle}")"
         class="nullLabel"
         aria-label="label for dropdown left blank use the question text"></label>

  @*only the first questions in the group should display this stage header such as Admission Performance, Discharge Goal, etc*@
  @if (displayStageHeader)
  {
    @*prevent the next inner div to be flexed*@
    <div>
      <div class="stageHeaderNoBottomBorder">@($"{Model.ViewComponentViewModel.StageTitle}")</div>
    </div>
  }
  <select class="browser-default custom-select select2 dropdown persistable"
          name="@(Model.ViewComponentViewModel.QuestionKey)"
          id="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.StageTitle}")"
          required="@(Model.ViewComponentViewModel.Required)"
          data-questionid="@(Model.ViewComponentViewModel.QuestionID)"
          data-questionkey="@(Model.ViewComponentViewModel.QuestionKey)"
          data-userid="@(Model.ViewComponentViewModel.UserID)"
          data-useranswerid="@(originalAnswer == null ? string.Empty : originalAnswer.EpisodeOfCare.EpisodeOfCareID)"
          data-oldvalue="@(originalAnswer == null ? string.Empty : originalAnswer.AnswerCodeSet.CodeValue)"
          data-answersetid="@(originalAnswer == null ? string.Empty : originalAnswer.AnswerSequenceNumber)"
          data-toggle="tooltip"
          data-placement="left"
          title="@(originalAnswer == null ? "" : $"Answered by {originalAnswer.ByUser}")">

    @*text white on wite background to reduce clutter but is required*@
    <option>@($"select 1 of {Model.ChoiceAndAnswerList.Count}")</option>

    @foreach (var item in Model.ChoiceAndAnswerList)
    {
      selectedItem = item;
      /* each item in the ChoicesAnswers contains maximum of one choice codeSetID and, if answered, one answer.codeSetID */
      <option value="@(item.SelectListItem.Value)"
              selected="@(item.SelectListItem.Selected)">
        @(item.SelectListItem.Text)
      </option>
    }
  </select>
  @if (selectedItem.SelectListItem.Selected)
  {
    <div class="longTextOption">@(selectedItem.SelectListItem.Text)</div>
  }
  else
  {
    <div class="longTextOption invisible"></div>
  }
</div>