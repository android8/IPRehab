@model ViewComponentTemplateModel
@{
  var thisItem = Model.ChoiceAndAnswerList.FirstOrDefault().SelectListItem;
  var originalAnswer = Model.ChoiceAndAnswerList.FirstOrDefault().Answer;
  bool displayStageHeader = (bool)Model.ViewComponentViewModel.DisplayStageHeader && !string.IsNullOrEmpty(Model.ViewComponentViewModel.StageTitle);
  string ContainerCssClass = Model.ViewComponentViewModel.ContainerCssClass;
  bool isMultiplChoices = Model.ViewComponentViewModel.MultipleChoices;
}
<div class="@ContainerCssClass">
  @if (displayStageHeader)
  {
    @*prevent the next inner div to be flexed*@
    <div>
      <div class="stageHeaderNoBottomBorder">@($"{Model.ViewComponentViewModel.StageTitle}")</div>
    </div>
  }

  @*Material Design Filled Text Input*@
  @if (int.TryParse(originalAnswer.Description, out int numericDescriptor))
  {
    <label class="mdc-text-field mdc-text-field--outlined"
           for="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.StageTitle}_{Model.ViewComponentViewModel.ControlCounter}")"
           id="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.StageTitle}_{Model.ViewComponentViewModel.ControlCounter}_label")">
      <span class="mdc-notched-outline">
        <span class="mdc-notched-outline__leading"></span>
        <span class="mdc-notched-outline__notch">
          <span class="mdc-floating-label" id="my-label-id"></span>
        </span>
        <span class="mdc-notched-outline__trailing"></span>
      </span>
      <input type="number"
             class="mdc-text-field__input numeric-text inputContainer persistable"
             name="@(Model.ViewComponentViewModel.QuestionKey)"
             id="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.StageTitle}_{Model.ViewComponentViewModel.ControlCounter}")"
             required="@(Model.ViewComponentViewModel.Required)"
             value="@(originalAnswer == null ? string.Empty : originalAnswer?.Description)"
             title="@(originalAnswer == null ? string.Empty : $"Answered by {originalAnswer.ByUser}")"
             aria-labelledby="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.StageTitle}_{Model.ViewComponentViewModel.ControlCounter}_label")" maxlength="3" min="0" max="100"
             placeholder="enter a number"
             data-oldvalue="@(originalAnswer == null ? "" : originalAnswer?.Description)"
             data-codesetid="@(thisItem.Value)"
             data-questionid="@(Model.ViewComponentViewModel.QuestionID)"
             data-questionkey="@(Model.ViewComponentViewModel.QuestionKey)"
             data-userid="@(Model.ViewComponentViewModel.UserID)"
             data-episodeid="@(originalAnswer == null ? "" : originalAnswer.EpisodeOfCare.EpisodeOfCareID)"
             data-answerSequence="@(originalAnswer == null ? "" : originalAnswer.AnswerSequenceNumber)"
             data-toggle="tooltip"
             data-placement="left" />
    </label>
  }
</div>