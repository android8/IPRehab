@model InputViewComponentTemplateModel

<div class="flex-start-column-nowrap">
    @{
        AnswerDTO originalAnswer = null;
        ChoiceAndAnswer selectedItem = null;
        var thisChoiceAndAnswer = Model.ChoiceAndAnswerList.FirstOrDefault(x => x.Answer != null);
        if (thisChoiceAndAnswer != null)
        {
            originalAnswer = thisChoiceAndAnswer.Answer;
        }

        bool displayStageHeader = Model.ViewComponentViewModel.DisplayMeasureHeader;
        int optionTextWordCount = 0;
        string thisOptionFullText = string.Empty;
    }

    @*the labe is required by HTML5 specification*@
    <label for="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.MeasureDescription}_{Model.ViewComponentViewModel.ControlCounter}")"
           id="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.MeasureDescription}_{Model.ViewComponentViewModel.ControlCounter}_label")"
           class="nullLabel" aria-label="@($"a dropdown for {Model.ViewComponentViewModel.QuestionKey}")"></label>

    @*only the first questions in the group should display this stage header such as Admission Performance, Discharge Goal, etc*@
    @if (displayStageHeader)
    {
        @*prevent the next inner div to be flexed*@
        <div>
            <div class="measureHeaderNoBottomBorder">@($"{Model.ViewComponentViewModel.MeasureTitleNormalized}")</div>
        </div>
    }
    <select disabled class="browser-default custom-select select2 dropdown persistable"
            name="@(Model.ViewComponentViewModel.QuestionKey)"
            id="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.MeasureDescription}_{Model.ViewComponentViewModel.ControlCounter}")"
            required="@(Model.ViewComponentViewModel.Required)"
            title="@(originalAnswer == null ? "" : $"Answered by {originalAnswer.ByUser}")"
            data-stageid="@(Model.ViewComponentViewModel.StageID)"
            data-questionid="@(Model.ViewComponentViewModel.QuestionID)"
            data-questionkey="@(Model.ViewComponentViewModel.QuestionKey)"
            data-userid="@(Model.ViewComponentViewModel.UserID)"
            data-answerid="@(originalAnswer?.AnswerID)"
            data-oldvalue="@(originalAnswer?.AnswerCodeSet.CodeSetID)"
            data-codesetid="@(originalAnswer?.AnswerCodeSet.CodeSetID)"
            data-codesetdescription="@(originalAnswer?.AnswerCodeSet.CodeDescription)"
            data-measuredescription="@(Model.ViewComponentViewModel.MeasureTitleNormalized)"
            data-measureid="@(Model.ViewComponentViewModel.MeasureID)"
            data-answersequence="@(originalAnswer?.AnswerSequenceNumber)"
            data-toggle="tooltip"
            data-placement="left"
            aria-labelledby="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.MeasureDescription}_{Model.ViewComponentViewModel.ControlCounter}_label")">

        @*text white on wite background to reduce clutter but is required*@
        <option value="-1">@($"select 1 of {Model.ChoiceAndAnswerList.Count}")</option>

        @foreach (var item in Model.ChoiceAndAnswerList)
        {
            string thisOptionScore = string.Empty;

            //convert leading 5 characters in the option text to numeric
            thisOptionScore = string.Concat(item.SelectListItem.Text.Substring(0,5).Where(Char.IsDigit));
            //thisOptionScore = string.Join(',', item.SelectListItem.Text.Where(Char.IsDigit));

            if (item.SelectListItem.Selected)
            {
                selectedItem = item;
                if (selectedItem.SelectListItem.Value != "0")
                {
                    //strip the leading value to display selected option full text
                    int firstDotPosition = item.SelectListItem.Text.IndexOf(".");
                    thisOptionFullText = item.SelectListItem.Text.Substring(firstDotPosition+1);
                    optionTextWordCount = thisOptionFullText.Count(c => Char.IsWhiteSpace(c) || Char.IsControl(c));
                }
            }
            
            /* each item in the ChoicesAnswers contains maximum of one choice codeSetID and, if answered, one answer.codeSetID */
            /* add data-score to assist individual choice scoring */
            <option value="@(item.SelectListItem.Value)"
                    selected="@(item.SelectListItem.Selected)"
                    data-score="@(thisOptionScore)">
                @(item.SelectListItem.Text)
            </option>
        }
    </select>
    @if (!string.IsNullOrEmpty(thisOptionFullText) && optionTextWordCount > 10)
    {
        <div class="longTextOption">@(thisOptionFullText)</div>
    }
    else
    {
        <div class="longTextOption invisible"></div>
    }
</div>