@model InputViewComponentTemplateModel
@* create multiple checkboxes and set checked if any *@
@{
  bool displayStageHeader = Model.ViewComponentViewModel.DisplayStageHeader && !string.IsNullOrEmpty(Model.ViewComponentViewModel.StageSysTitle);
}

<div class="flex-item">

  @foreach (var item in Model.ChoiceAndAnswerList)
  {
    /* each item in the ChoicesAnswers contains maximum of one choice codeSetID and, if answered, one answer.codeSetID */
    var originalAnswer = item.Answer;
    var isChecked = item.SelectListItem.Selected;

    <div class="mdc-form-field">
      <div class="mdc-checkbox">
        <input type="checkbox" 
               class="mdc-checkbox__native-control persistable"
               name="@Model.ViewComponentViewModel.QuestionKey"
               id="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.StageSysTitle}_{item.SelectListItem.Value}")"
               required="@(Model.ViewComponentViewModel.Required)"
               value="@item.SelectListItem.Value"
               title="@(originalAnswer == null ? string.Empty : $"Answered by {originalAnswer.ByUser}")"
               checked="@(isChecked)"
               data-oldcheck='@(isChecked)'
               data-stageid="@(Model.ViewComponentViewModel.StageID)"
               data-questionid="@(Model.ViewComponentViewModel.QuestionID)"
               data-questionkey="@(Model.ViewComponentViewModel.QuestionKey)"
               data-userid="@(Model.ViewComponentViewModel.UserID)"
               data-answerid="@(originalAnswer == null ? -1 : originalAnswer.AnswerID)"
               data-oldvalue="@(originalAnswer == null ? string.Empty : originalAnswer.AnswerCodeSet.CodeValue)"
               data-codesetid="@item.SelectListItem.Value"
               data-codesetdescription="@(item.SelectListItem.Text)"
               data-answersequencenumber="@(originalAnswer == null ? 1 : originalAnswer.AnswerSequenceNumber)"
               data-toggle="tooltip"
               data-placement="left"
               aria-labelledby="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.StageSysTitle}_{item.SelectListItem.Value}_{item.SelectListItem.Value}_label")">

        <span asp-validataion-for="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.StageSysTitle}_{item.SelectListItem.Value}")"></span>

        <div class="mdc-checkbox__background">
          <svg class="mdc-checkbox__checkmark"
               viewBox="0 0 24 24">
            <path class="mdc-checkbox__checkmark-path" fill="none" d="M1.73,12.91 8.1,19.28 22.79,4.59"></path>
            <title>Mateial icon</title>
          </svg>
          <div class="mdc-checkbox__mixedmark"></div>
        </div>
        <div class="mdc-checkbox__ripple"></div>
      </div>

      <label for="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.StageSysTitle}_{item.SelectListItem.Value}_{item.SelectListItem.Value}")"
             id="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.StageSysTitle}_{item.SelectListItem.Value}_{item.SelectListItem.Value}_label")">
        @*strip the code value *@
        @if (item.SelectListItem.Text.IndexOf(".") >= 0 && item.SelectListItem.Text.IndexOf(".") <= 3)
        {
          @(item.SelectListItem.Text.Substring(item.SelectListItem.Text.IndexOf(".")+1))
        }
        else
        {
          @(item.SelectListItem.Text)
        }
      </label>
    </div>
  }

  @if (displayStageHeader)
  {
    @*prevent the next inner div to be flexed*@
    <div>
      <div class="@(Model.ViewComponentViewModel.StageHeaderBorderCssClass)">
        @($"{Model.ViewComponentViewModel.StageTitle.Replace("_"," ")}")
      </div>
    </div>
  }
</div>