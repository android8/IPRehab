@model InputViewComponentTemplateModel
@* create multiple checkboxes and set checked if any *@
@{
    bool displayStageHeader = Model.ViewComponentViewModel.DisplayMeasureHeader;
    string ContainerCssClass = Model.ViewComponentViewModel.ContainerCssClass;
}

<div class="@ContainerCssClass">

    @foreach (var item in Model.ChoiceAndAnswerList)
    {
        /* each item in the ChoicesAnswers contains maximum of one choice codeSetID and, if answered, one answer.codeSetID */
        var originalAnswer = item.Answer;
        var isChecked = item.SelectListItem.Selected;

        <div class="mdc-form-field">
            <div class="mdc-checkbox">
                <input disabled type="checkbox"
                       class="mdc-checkbox__native-control persistable"
                       name="@($"{Model.ViewComponentViewModel.MeasureTitleNormalized}")"
                       id="@($"{Model.ViewComponentViewModel.MeasureTitleNormalized}")"
                       @(Model.ViewComponentViewModel.Required ? "required=required" : null)
                       value="@item.SelectListItem.Value"
                       title="@(originalAnswer == null ? string.Empty : $"Answered by {originalAnswer.ByUser}")"
                       @(isChecked ? "checked=checked" : null)
                       data-stageid="@(Model.ViewComponentViewModel.StageID)"
                       data-questionid="@(Model.ViewComponentViewModel.QuestionID)"
                       data-questionkey="@(Model.ViewComponentViewModel.QuestionKey)"
                       data-userid="@(Model.ViewComponentViewModel.UserID)"
                       data-answerid="@(originalAnswer?.AnswerID)"
                       data-oldvalue="@(originalAnswer?.AnswerCodeSet.CodeSetID)"
                       data-codesetid="@item.SelectListItem.Value"
                       data-codesetdescription="@(item.SelectListItem.Text)"
                       data-measuredescription="@(Model.ViewComponentViewModel.MeasureDescription)"
                       data-measureid="@(Model.ViewComponentViewModel.MeasureID)"
                       data-answersequence="@(originalAnswer?.AnswerSequenceNumber)"
                       data-toggle="tooltip"
                       data-placement="left"
                       aria-labelledby="@($"{Model.ViewComponentViewModel.MeasureTitleNormalized}_label")">

                <span asp-validataion-for="@($"{Model.ViewComponentViewModel.MeasureTitleNormalized}_{item.SelectListItem.Value}")"></span>

                <div class="mdc-checkbox__background">
                    <svg class="mdc-checkbox__checkmark"
                         viewBox="0 0 24 24">
                        <path class="mdc-checkbox__checkmark-path" fill="none" d="M1.73,12.91 8.1,19.28 22.79,4.59"></path>
                        <title>Material icon</title>
                    </svg>
                    <div class="mdc-checkbox__mixedmark"></div>
                </div>
                <div class="mdc-checkbox__ripple"></div>
            </div>

            @*the labe is required by HTML5 specification*@
            <label for="@($"{Model.ViewComponentViewModel.MeasureTitleNormalized}")"
                   id="@($"{Model.ViewComponentViewModel.MeasureTitleNormalized}_label")"
                   class="@(Model.ViewComponentViewModel.MeasureHeaderBorderCssClass)" 
                   aria-label="@($"a checkbox for {Model.ViewComponentViewModel.QuestionKey}")">
                   @($"{Model.ViewComponentViewModel.MeasureDescription}")
            </label>
        </div>
    }
@* 
    @if (displayStageHeader)
    {
        <div class="arrow-left"></div>
        @@@@*only the first questions in the group should display this stage header such as Admission Performance, Discharge Goal, etc. to prevent the next inner div to be flexed@@@
        <div>
            <div class="sr-only @(Model.ViewComponentViewModel.MeasureHeaderBorderCssClass)">
                @($"{Model.ViewComponentViewModel.MeasureDescription}")
            </div>
        </div>
    }
 *@
</div>