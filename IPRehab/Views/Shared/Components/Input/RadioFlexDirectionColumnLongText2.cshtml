@using System.Text.RegularExpressions
@model InputViewComponentTemplateModel
@{
    AnswerDTO originalAnswer = null;

    var thisChoiceAndAnswer = Model.ChoiceAndAnswerList.FirstOrDefault(x => x.Answer != null);
    if (thisChoiceAndAnswer != null)
    {
        originalAnswer = thisChoiceAndAnswer.Answer;
    }

    bool displayMeasureHeader = Model.ViewComponentViewModel.DisplayMeasureHeader;
    string ContainerCssClass = Model.ViewComponentViewModel.ContainerCssClass;
}

@if (displayMeasureHeader)
{
    @*prevent the next inner div to be flexed*@
    <div>
        <div class="measureHeaderNoBottomBorder">@($"{Model.ViewComponentViewModel.MeasureDescription}")</div>
    </div>
}

<div class="@(ContainerCssClass) @(displayMeasureHeader? "radioContainer": string.Empty)">

    @foreach (var item in Model.ChoiceAndAnswerList)
    {
        var isChecked = item.SelectListItem.Selected;
        Regex rgxIdPattern = new Regex(@"[^a-zA-Z]"); /*non-alpha*/
        string idSuffix = rgxIdPattern.Replace(item.SelectListItem.Text, "");

        Regex rgxLabelPatern = new Regex(@"[^0-9]");
        string labelText = string.Empty;
        @*strip the leading numeric code value in the codeset *@
        @if (rgxLabelPatern.IsMatch(item.SelectListItem.Text))
        {
            labelText = item.SelectListItem.Text.Substring(item.SelectListItem.Text.IndexOf(".") + 1);
        }
        else
        {
            labelText = item.SelectListItem.Text;
        }
       

        <div class="flex-start-row-nowrap">
            <div class="mdc-touch-target-wrapper">
                <div class="mdc-radio mdc-radio--touch">
                    <input disabled type="radio"
                           class="mdc-radio__native-control persistable"
                           name="@($"{Model.ViewComponentViewModel.MeasureTitleNormalized}")"
                           id="@($"{Model.ViewComponentViewModel.MeasureTitleNormalized}_{idSuffix}")"
                           required="@(Model.ViewComponentViewModel.Required)"
                           value="@(item.SelectListItem.Value)"
                           title="@(originalAnswer == null ? string.Empty : $"Answered by {originalAnswer.ByUser}")"
                           checked="@(isChecked)"
                           data-stageid="@(Model.ViewComponentViewModel.StageID)"
                           data-questionid="@(Model.ViewComponentViewModel.QuestionID)"
                           data-questionkey="@(Model.ViewComponentViewModel.QuestionKey)"
                           data-userid="@(Model.ViewComponentViewModel.UserID)"
                           data-answerid="@(originalAnswer?.AnswerID)"
                           data-oldvalue="@(originalAnswer?.AnswerCodeSet.CodeSetID)"
                           data-codesetid="@(item.SelectListItem.Value)"
                           data-codesetdescription="@(item.SelectListItem.Text)"
                           data-measuredescription="@(Model.ViewComponentViewModel.MeasureDescription)"
                           data-measureid="@(Model.ViewComponentViewModel.MeasureID)"
                           data-answersequence="@(originalAnswer?.AnswerSequenceNumber)"
                           data-toggle="tooltip"
                           data-placement="left"
                           aria-labelledby="@($"{Model.ViewComponentViewModel.MeasureTitleNormalized}_{idSuffix}_label")" />

                    <div class="mdc-radio__background">
                        <div class="mdc-radio__outer-circle"></div>
                        <div class="mdc-radio__inner-circle"></div>
                    </div>
                    <div class="mdc-radio__ripple"></div>
                </div>
            </div>
            <div class="arrow-left-radio"></div>
            <label class="radioLabel"
                   for="@($"{Model.ViewComponentViewModel.MeasureTitleNormalized}_{idSuffix}")"
                   id="@($"{Model.ViewComponentViewModel.MeasureTitleNormalized}_{idSuffix}_label")">@(labelText)</label>
        </div>
    }
</div>