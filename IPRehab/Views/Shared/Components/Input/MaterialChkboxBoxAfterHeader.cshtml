@model InputViewComponentTemplateModel
@* create multiple checkboxes and set checked if any *@
@{
  bool displayStageHeader = Model.ViewComponentViewModel.DisplayStageHeader && !string.IsNullOrEmpty(Model.ViewComponentViewModel.StageTitle);
  string ContainerCssClass = Model.ViewComponentViewModel.ContainerCssClass;
}

<div class="@ContainerCssClass">

  @if (displayStageHeader)
  {
    <div class="arrow-right"></div>
    @*only the first questions in the group should display this stage header such as Admission Performance, Discharge Goal, etc*@
    @*prevent the next inner div to be flexed*@
    <div>
      <div class="@(Model.ViewComponentViewModel.StageHeaderBorderCssClass)">
        @($"{Model.ViewComponentViewModel.StageTitle.Replace("_"," ")}")
      </div>
    </div>
  }

  @foreach (var thisItem in Model.ChoiceAndAnswerList)
  {
    /* each item in the ChoicesAnswers contains maximum of one choice codeSetID and, if answered, one answer.codeSetID */
    var originalAnswer = thisItem.Answer;
    var isChecked = thisItem.SelectListItem.Selected;

    <div class="mdc-form-field">
      <div class="mdc-checkbox">
        <input type="checkbox" 
               class="mdc-checkbox__native-control persistable"
               name="@(Model.ViewComponentViewModel.QuestionKey)"
               id="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.StageTitle}_{thisItem.SelectListItem.Value}")"
               required="@(Model.ViewComponentViewModel.Required)"
               value="@(thisItem.SelectListItem.Value)"
               title="@(originalAnswer == null ? string.Empty : $"Answered by {originalAnswer.ByUser}")"
               checked="@(isChecked)"
               data-stageid="@(Model.ViewComponentViewModel.StageID)"
               data-questionid="@(Model.ViewComponentViewModel.QuestionID)"
               data-questionkey="@(Model.ViewComponentViewModel.QuestionKey)"
               data-userid="@(Model.ViewComponentViewModel.UserID)"
               data-answerid="@(originalAnswer == null ? -1 : originalAnswer.AnswerID)"
               data-oldvalue="@(originalAnswer == null ? string.Empty : originalAnswer.AnswerCodeSet.CodeValue)"
               data-codesetid="@thisItem.SelectListItem.Value"
               data-codesetdescription="@(thisItem.SelectListItem.Text)"
               data-answersequencenumber="@(originalAnswer == null ? 1 : originalAnswer.AnswerSequenceNumber)"
               data-toggle="tooltip"
               data-placement="left"
               aria-labelledby="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.StageTitle}_{thisItem.SelectListItem.Value}_label")">

        <span asp-validataion-for="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.StageTitle}_{thisItem.SelectListItem.Value}")"></span>

        <div class="mdc-checkbox__background">
          <svg class="mdc-checkbox__checkmark"
               viewBox="0 0 24 24">
            <path class="mdc-checkbox__checkmark-path" fill="none" d="M1.73,12.91 8.1,19.28 22.79,4.59"></path>
            <title>Mateial icon</title>
          </svg>
          <div class="mdc-checkbox__mixedmark"></div>
        </div>
        <div class="mdc-checkbox__ripple"></div>
      </div>

      @*the labe is required by HTML5 specification*@
      <label for="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.StageTitle}_{thisItem.SelectListItem.Value}")"
             id="@($"{Model.ViewComponentViewModel.QuestionKey}_{Model.ViewComponentViewModel.StageTitle}_{thisItem.SelectListItem.Value}_label")"
             class="nullLabel"></label>
    </div>
  }
</div>