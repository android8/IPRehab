@model QuestionHierarchy

@{
    ViewData["Title"] = $"{Model.StageTitle}";
}

@section VendorStyles {

    @* additional vendor css for the view *@
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.css" />

}

@section VendorScripts {

    @* additional vendor js for the view *@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<environment include="Production">

    @* additional production environment minified css*@
    @section MyStyles_prod {
        <link rel="stylesheet" href="~/css/snowAnimation.min.css" />
    }

    @* additional production environment minified css*@
    @section MyScripts_block1_prod {
        <script type="module" src="~/js/questionBundle.min.js" asp-append-version="true" async></script>
        <script type="text/JavaScript">
            window.onbeforeunload = function (e) { pageUnload(); };
        </script>
    }

</environment>

<environment include="Development">
    @* additional development environment unminified css *@
    @section MyStyles_dev {
        <link rel="stylesheet" href="~/css/snowAnimation.css" />
    }

    @section MyScripts_block1_dev {
        <script type="module" src="~/js/app/commandBtns.js" asp-append-version="true" async></script>
        <script type="module" src="~/js/app/branching.js" asp-append-version="true" async></script>
        <script type="module" src="~/js/app/form.js" asp-append-version="true" async></script>

        <script type="text/JavaScript">
            window.onbeforeunload = function (e) { pageUnload(); };
        </script>
    }
</environment>

@* question tabs *@
<nav class="sidebar-nav">
    @await Html.PartialAsync("_QuestionTabs", null,
            new ViewDataDictionary(ViewData) {
    { "sectionInfo", Model.Sections },
    { "readOnly", Model.ReadOnly }
    })
</nav>

<aside>
    <div id="dialog"></div>

    @* aggregator's content to be cloned from scoreSections *@
    @switch (@Model.StageTitle)
    {
        case "Episode Of Care":
        case "New":
            @await Html.PartialAsync("_SlidingAggretates")
            break;
        case "Interim":
        case "Follow Up":
            @await Html.PartialAsync("_SlidingAggretates_Interim_Followup")
            break;
    }

    @if (!Model.ReadOnly)
    {
        @* save button *@
        <div>
            <div class="mdc-touch-target-wrapper flex-start-row-nowrap">
                <button class="mdc-button mdc-button--raised mdc-button--touch rotate ajax-post-btn"
                        id="ajaxPost" disabled data-apibaseurl="@(Model.WebApiBaseUrl)"
                        data-controller="answer" data-action="post">
                    <div class="mdc-button__ripple"></div>
                    <span class="mdc-button__label">Save</span>
                    <div class="mdc-button__touch"></div>
                </button>
                @*<input type="submit" value="MVC Post" id="mvcPost" class="rotate mvc-post-btn" disabled>*@
            </div>
        </div>

        @* slidingAggregator trigger button r*@
        <div>
            <div class="mdc-touch-target-wrapper flex-start-row-nowrap">
                <button id="rotateSlidingAggregatorHandle" class="mdc-button mdc-button--raised mdc-button--touch">
                    <div class="mdc-button__ripple"></div>
                    <span class="mdc-button__label">Scores Card</span>
                    <div class="mdc-button__touch"></div>
                </button>
                @*<input type="submit" value="MVC Post" id="mvcPost" class="rotate mvc-post-btn" disabled>*@
            </div>
        </div>
    }
</aside>

<article class="paddingTop">
    @* command buttons *@
    <div class="flex-container-evenly-justified fixedTop">
        <div class="pageTitle" data-systitle="@Model.StageCode">@Model.StageTitle</div>
        <div class="flex-container-evenly-justified">
            @{
                string newEpisodeBtnComponent = typeof(IPRehab.ViewComponents.StageCommandBtnViewComponent).Name.Replace("ViewComponent", string.Empty);
                PatientEpisodeAndCommandVM thisEpisodeBtnConfig = Model.EpisodeBtnConfig.First();

                /* don't put the next next component invokationinside the code block. It must be by itself starting @ sign. Otherwise, it won't render*/
            }
            @await Component.InvokeAsync(newEpisodeBtnComponent, new { EpisodeBtnconfig = thisEpisodeBtnConfig })
        </div>
        <div class="text-center patientName">@Model.PatientName</div>
        <div class=""></div>
    </div>

    @* icon legend *@
    <div class="flex-container-evenly-justified">
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
                <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                <title>Anser is required</title>
            </svg> Answer is required for this form to be complete;
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-key-fill keyQuestion" viewBox="0 0 16 16">
                <path d="M3.5 11.5a3.5 3.5 0 1 1 3.163-5H14L15.5 8 14 9.5l-1-1-1 1-1-1-1 1-1-1-1 1H6.663a3.5 3.5 0 0 1-3.163 2zM2.5 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2z" />
                <title>Key question</title>
            </svg> Key question
        </div>
        <div class="episodeID_legend">
            @(Model.StageTitle == "New" ? "New Episode" : "Episode ID:")
            <span id='episodeID_legend'>@(Model.StageTitle == "New" ? "" : Model.EpisodeID)</span>
        </div>
    </div>

    <form method="post" enctype="multipart/form-data" asp-action="Edit" id="userAnswerForm" name="userAnswerForm">
        <input type="hidden" id="stage" name="stage" value="@(Model.StageTitle)" />
        <input type="hidden" id="patientID" name="patientID" value="@(Model.PatientID)" />
        <input type="hidden" id="patientName" name="patientName" value="@(Model.PatientName)" />
        <input type="hidden" id="episodeID" name="episodeID" value="@Model.EpisodeID" />
        <input type="hidden" id="facilityID" name="facilityID" value="@Model.FacilityID" />

        <div class="flex-start-column-nowrap">
            @if (Model.StageTitle == "Full" || Model.StageTitle == "All")
            {
                @*form name row*@
                <div id="nonPaddinRow">
                    <div class="flex-end-row-nowrap formName">@Model.StageTitle</div>
                </div>
            }

            @foreach (SectionInfo si in Model.Sections)
            {
                List<QuestionGroup> GroupsInThisSection = si.QuestionGroups;

                @*section*@
                <section>
                    <div class="questionSection">
                        <div class="section-title" title="click to expand/collapse">
                            <a name="@(si.SectionKey.Replace("(",string.Empty).Replace(")",string.Empty))"
                               id="@(si.SectionKey.Replace("(",string.Empty).Replace(")",string.Empty))"></a>
                            @si.SectionTitle
                            @if (!string.IsNullOrEmpty(si.SectionInstruction))
                            {
                                @* instruction icon*@
                                <div class="sectionInstruction">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle instructionIcon" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                        <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z" />
                                        <title>Section Instruction</title>
                                    </svg>
                                    @si.SectionInstruction
                                </div>
                            }
                        </div>
                        <div class="section-content">
                            @foreach (var thisGroup in GroupsInThisSection)
                            {
                                bool hasKeyQuestions = thisGroup.Questions.Any(q => q.KeyQuestion.HasValue && q.KeyQuestion.Value == true);
                                bool hasRequiredQuestions = thisGroup.Questions.Any(q => q.Required.HasValue && q.Required.Value == true);
                                int controlCounter = 0;

                                @*question*@
                                <div class="flex-start-row-nowrap questionRow">
                                    <div class="child1 btn btn-secondary" title="click to expand/collapse" @*accordion header*@>
                                        @(thisGroup.SharedQuestionKey == "AssessmentCompleted" ? "Assessment Completed" : thisGroup.SharedQuestionKey)
                                    </div>
                                    <div class="child2 flex-start-row-nowrap" @*accordion content*@>
                                        @* cell for question text *@
                                        <div class="questionText2">
                                            <div class="flex-start-column-nowrap">
                                                @* flex columnwise for question text and question instruction *@
                                                <div>
                                                    @thisGroup.SharedQuestionText
                                                </div>

                                                @if (!string.IsNullOrEmpty(thisGroup.SharedQuestionInstruction))
                                                {
                                                    @* instruction icon*@
                                                    <div class="questionInstruction">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle instructionIcon" viewBox="0 0 16 16">
                                                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                                            <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z" />
                                                            <title>Instruction</title>
                                                        </svg>
                                                        @thisGroup.SharedQuestionInstruction
                                                    </div>
                                                }
                                                <div class="flex-start-row-nowrap">
                                                    @if (hasKeyQuestions)
                                                    {
                                                        @* key question icon *@
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-key-fill keyQuestion" viewBox="0 0 16 16">
                                                            <path d="M3.5 11.5a3.5 3.5 0 1 1 3.163-5H14L15.5 8 14 9.5l-1-1-1 1-1-1-1 1-1-1-1 1H6.663a3.5 3.5 0 0 1-3.163 2zM2.5 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2z" />
                                                            <title>Record key</title>
                                                        </svg>
                                                    }
                                                    @*required question star icon*@
                                                    @if (hasRequiredQuestions)
                                                    {
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
                                                        <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                                                        <title>Answer is required</title>
                                                        </svg>
                                                    }

                                                    @* has branching rule *@
                                                    <div class="branchingRule" data-target="@($"{thisGroup.SharedQuestionKey}")" title="Branching rule">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-diagram-3-fill" viewBox="0 0 16 16">
                                                            <path fill-rule="evenodd" d="M6 3.5A1.5 1.5 0 0 1 7.5 2h1A1.5 1.5 0 0 1 10 3.5v1A1.5 1.5 0 0 1 8.5 6v1H14a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-1 0V8h-5v.5a.5.5 0 0 1-1 0V8h-5v.5a.5.5 0 0 1-1 0v-1A.5.5 0 0 1 2 7h5.5V6A1.5 1.5 0 0 1 6 4.5v-1zm-6 8A1.5 1.5 0 0 1 1.5 10h1A1.5 1.5 0 0 1 4 11.5v1A1.5 1.5 0 0 1 2.5 14h-1A1.5 1.5 0 0 1 0 12.5v-1zm6 0A1.5 1.5 0 0 1 7.5 10h1a1.5 1.5 0 0 1 1.5 1.5v1A1.5 1.5 0 0 1 8.5 14h-1A1.5 1.5 0 0 1 6 12.5v-1zm6 0a1.5 1.5 0 0 1 1.5-1.5h1a1.5 1.5 0 0 1 1.5 1.5v1a1.5 1.5 0 0 1-1.5 1.5h-1a1.5 1.5 0 0 1-1.5-1.5v-1z" />
                                                        </svg>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        @*cell for adding morebutton
                                            <div class="questionKey" title="question key">

                                            @if (thisGroup.Questions.Any(q => q.MultipleChoices))
                                            {
                                            string thisQuestionKey = thisGroup.Questions.FirstOrDefault(x => x.MultipleChoices == true)?.QuestionKey;
                                            <div class="mdc-touch-target-wrapper">
                                            <button class="mdc-button mdc-button--touch" title="Add more answers" id="@($"btnMore{thisQuestionKey}")" data-questionkey="@(thisQuestionKey)">
                                            <div class="mdc-button__ripple"></div>
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle-fill" viewBox="0 0 16 16">
                                            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z" />
                                            <title>Add more answers</title>
                                            </svg>
                                            <div class="mdc-button__touch"></div>
                                            </button>
                                            </div>
                                            }
                                            </div>
                                        *@

                                        @* cell for view components *@
                                        @{
                                            string controlId = string.Empty;
                                            string inputViewComponent = typeof(IPRehab.ViewComponents.InputViewComponent).Name.Replace("ViewComponent", string.Empty);
                                            bool aggregateAfterThis = false;
                                            bool showoGradTotal = false;
                                        }

                                        <div class="@(thisGroup.Questions.Any(q=>q.QuestionKey =="Q43")? "answer2date": "answer2")">
                                            @foreach (var q in thisGroup.Questions)
                                            {
                                                aggregateAfterThis = q.QuestionKey == si.AggregateAfterQuestionKey;
                                                showoGradTotal = aggregateAfterThis && q.QuestionKey == "GG0170SS";

                                                if (q.QuestionKey + q.MeasureDescription == controlId)
                                                    controlCounter++;

                                                @await Component.InvokeAsync(inputViewComponent, new
                                                    {
                                                        EpisodeID = Model.EpisodeID,
                                                        ControlCounter = controlCounter,
                                                        QWS = q,
                                                        NetworkID = (string)ViewBag.CurrentUserID
                                                    })
                                            }
                                        </div>
                                    </div>
                                </div>
                                @if (aggregateAfterThis)
                                {
                                    @switch (Model.StageCode)
                                    {
                                        case "New":
                                        case "Base":
                                            await Html.RenderPartialAsync("_Aggregates_Base", si);
                                            break;
                                        default:
                                            await Html.RenderPartialAsync("_Aggregates", si);
                                            break;
                                    }
                                    @if (showoGradTotal)
                                    {
                                        @switch (Model.StageCode)
                                        {
                                            case "New":
                                            case "Base":
                                                await Html.RenderPartialAsync("_Aggregates_GrandTotal_Base");
                                                break;
                                            default:
                                                await Html.RenderPartialAsync("_Aggregates_GrandTotal");
                                                break;
                                        }
                                    }
                                }
                            }
                        </div>
                    </div>
                </section>
            }
        </div>
    </form>
</article>