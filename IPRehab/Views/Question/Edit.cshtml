@model IEnumerable<QuestionWithSelectItems>

@{
  ViewData["Title"] = $"{ViewBag.Rediect}{ViewBag.Title}";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

<nav>
  @await Html.PartialAsync("_QuestionTabs", null, new ViewDataDictionary(ViewData) {
    { "sectionInfo", ((List<SectionInfo>)ViewBag.QuestionSections) }
  })
</nav>

<article class="paddingTop">
  <div class="flex-container-evenly-justified fixedTop">
    <div class="flex-container-evenly-justified">
      <h1>@ViewBag.Title</h1>
      <span class="badge @ViewBag.ModeColor">@ViewBag.action</span>
    </div>
    <div class="flex-container-evenly-justified">
      @{await Html.RenderPartialAsync("_RehabActionBtns", (RehabActionViewModel)ViewBag.ActionBtnVM);}
      &nbsp;
      <a asp-controller="Patient" asp-action="Index" class="btn-sm btn-secondary">Paients List</a>
    </div>
    <span class="text-center patientName">@(((RehabActionViewModel)ViewBag.ActionBtnVM).PatientName)</span>
    <div style="width:30px"></div>
  </div>
  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
    <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
  </svg> answer is required
  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-key-fill keyQuestion" viewBox="0 0 16 16">
    <path d="M3.5 11.5a3.5 3.5 0 1 1 3.163-5H14L15.5 8 14 9.5l-1-1-1 1-1-1-1 1-1-1-1 1H6.663a3.5 3.5 0 0 1-3.163 2zM2.5 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2z" />
  </svg> key question
  <table class="table-striped" id="questionnaire">
    <thead>
      <tr>
        <th></th>
        <th></th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      @{

        string currentForm = "";
        string currentSection = "";
        string currentTitle = "";
        string currentQuestion = "";
        string cssClass = string.Empty;

        int row = 0;
        foreach (var q in Model)
        {
          if (currentForm != q.Form && ViewBag.Title == "IRF-PAI Form")
          {
            currentForm = q.Form;
            <tr id="nonPaddinRow">
              <td></td>
              <td></td>
              <td><div class="flex-end-row-nowrap formName">@currentForm</div></td>
            </tr>
          }

          row++;

          //show question title only once per querstion
          if (currentSection != q.Section)
          {
            currentSection = q.Section;
            <tr>
              <td class="questionTitle" colspan="4">
                <a name="@q.Section"></a>
                @Html.DisplayFor(m => q.QuestionTitle)
                @if (q.Instructions != null)
                {
                  bool sectionIconDone = false;
                  foreach (var ins in q.Instructions)
                  {
                    if (ins.DisplayLocation == "Section Header")
                    {
                      if (!sectionIconDone)
                      {
                        sectionIconDone = true;
                        //show instruction icon
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle-fill" viewBox="0 0 16 16">
                        <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z" />
                      </svg>
                      }
                    <span class="questionInstruction">@ins.Instruction&nbsp;&nbsp;</span>
                    }
                  }
                }
              </td>
            </tr>
          }

          if (q.Question != currentQuestion && q.QuestionTitle != currentTitle)
            cssClass = "borderTop";
          else
            cssClass = "borderBottom";

          <tr class="@cssClass">
            @*<td><span class="badge badge-pill">@row</span></td>*@
            <td class="questionText">
              @if (q.Question != currentQuestion)
              {
                /* show only once the same question */
                currentQuestion = q.Question;
                if (q.Required.HasValue && q.Required.Value == true)
                {
                  if (q.QuestionKey == "Q12" || q.QuestionKey == "Q23")
                  {
                    /* show key question star */
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-key-fill keyQuestion" viewBox="0 0 16 16">
                      <path d="M3.5 11.5a3.5 3.5 0 1 1 3.163-5H14L15.5 8 14 9.5l-1-1-1 1-1-1-1 1-1-1-1 1H6.663a3.5 3.5 0 0 1-3.163 2zM2.5 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2z" />
                    </svg>
                  }
                  else
                  {
                    /* show star */
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
                      <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                    </svg>
                  }
                }

                @Html.DisplayFor(m => q.Question)

                @if (q.Instructions != null)
                {
                  bool questionIconDone = false;
                  foreach (var ins in q.Instructions)
                  {
                    if (ins.DisplayLocation != "Section Header")
                    {
                      if (!questionIconDone)
                      {
                        questionIconDone = true;
                        //show instruction icon
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle-fill" viewBox="0 0 16 16">
                          <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z" />
                        </svg>
                      }
                      <div class="questionInstruction">
                        @ins.Instruction
                      </div>
                    }
                  }
                }
              }
              else
              {
                if (q.QuestionKey == "H0400")
                {
                  //show only once the same question but different question title
                  currentQuestion = q.Question;
                  if (q.Required.HasValue && q.Required.Value == true)
                  {
                    //show star
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
                      <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                    </svg>
                  }

                  @Html.DisplayFor(m => q.Question)
                }
              }

            </td>
            <td class="questionKeyAndTitle">
              @($"{q.QuestionKey}")
              @if (!string.IsNullOrEmpty(q.GroupTitle))
              {
                @($" - {q.GroupTitle}")
              }
            </td>
            <td class="answer">
              @{
                int choiceCount = q.ChoiceList.Count();
                string choicePrompt = $"select 1 of {choiceCount} choices";

                switch (choiceCount)
                {
                  case int n when n > 3:
                    {
                      @Html.DropDownList(q.QuestionKey, q.ChoiceList, choicePrompt, new { @id = $"{q.QuestionKey}{q.GroupTitle}", @class = "select2 wrapLongOption", @readonly = "readonly" })
                      <label for="@($"{q.QuestionKey}{q.GroupTitle}")" aria-label="dropdown null label"></label>
                    }
                    break;

                  case 2:
                  case 3:
                    {
                      foreach (var c in q.ChoiceList)
                      {
                        <div>
                          @Html.RadioButton(q.QuestionKey, q.ChoiceList, c.Selected ? true : false, new { @id = $"{q.QuestionKey}{c.Value}" })
                          <label for="@($"{q.QuestionKey}{c.Value}")" class="radioLabel" aria-label="Radio button label">@c.Text</label>
                        </div>
                      }
                    }
                    break;

                  case 1:
                  case 0:
                    {
                      switch (q.AnswerCodeCategory)
                      {
                        case "YN":
                        case "Checked": /* each checkbox binds to on or off state so the ChoiceList has only one item */
                          {
                            bool isChecked = false;
                            if (q.ChoiceList.Any())
                            {
                              isChecked = true;
                            }

                            @Html.CheckBox(q.QuestionKey, isChecked, new { htmlAttributes = new { @id = $"{q.QuestionKey}", @class = "optionStyle" /*, @readonly = "readonly"*/ } });
                            <label for="@($"{q.QuestionKey}")" aria-label="Checkbox null label"></label>
                          }
                          break;

                        case "Date":
                          {
                            <label for="@($"{q.QuestionKey}")" aria-label="date null label"></label>
                            if (q.ChoiceList.Any())
                            {
                              <input type="date" id="@($"{q.QuestionKey}")" max="@DateTime.Today.ToString("MM/dd/yyyy")"
                                     placeholder="MM/dd/yyyy"
                                     value="@($"{q.ChoiceList.First()?.Text}")" />
                            }
                            else
                            {
                              <input type="date" id="@($"{q.QuestionKey}")" max="@DateTime.Today.ToString("MM/dd/yyyy")"
                                     placeholder="MM/dd/yyyy" />
                            }
                          }
                          break;

                        case "ICD":
                          {
                            <label for="@q.QuestionKey" aria-label="textbox label"></label>
                            @Html.TextBox(q.QuestionKey, "Enter an ICD code here", new { htmlAttributes = new { @id = q.QuestionKey, @class = "textBoxStyle" /*, @readonly = "readonly"*/ } });
                          }
                          break;

                        case "FreeText":
                          {
                            <label for="@q.QuestionKey" aria-label="free text label"></label>
                            @Html.TextBox(q.QuestionKey, "Enter text here", new { htmlAttributes = new { @id = q.QuestionKey, @class = "textBoxStyle" /*, @readonly = "readonly"*/ } });
                            break;
                          }
                      }
                    }
                    break;
                }
              }
            </td>
          </tr>

          @if ((ViewBag.Title == "Base" && q.QuestionKey == "GG0130H" && q.GroupTitle == "3. Discharge Performance") ||
    ((ViewBag.Title == "Initial" || ViewBag.Title == "Interim" || ViewBag.Title == "Discharge") && q.QuestionKey == "GG0130H"))
          {
            <tr>
              <td colspan="3"><div class="flex-row-reverse green" id="SelfCareScore"><div>Self Care Aggregate Score: TBD</div></div></td>
            </tr>
          }
          @if (
    (ViewBag.Title == "Base" && q.QuestionKey == "GG0170SS1") ||
    (ViewBag.Title == "Initial" && q.QuestionKey == "GG0170SS1") ||
    (ViewBag.Title == "Interim" && q.QuestionKey == "GG0170SS1") ||
    (ViewBag.Title == "Discharge" && q.QuestionKey == "GG0170SS3") ||
    (ViewBag.Title == "Follow Up" && q.QuestionKey == "GG0170SS1")
   )
          {
            <tr>
              <td colspan="3"><div class="flex-row-reverse green" id="SelfCareScore"><div>Mobility Aggregate Score: TBD</div></div></td>
            </tr>
          }
        }
      }
    </tbody>
  </table>
</article>

@section Scripts {
  @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
  <script type="module" src="~/lib/select2/js/select2.js" asp-append-version="true"></script>
  <script type="module" src="~/js/app/form.js" asp-append-version="true"></script>
  <script>
    $(function () {
      $(".disabled").removeClass("disabled"); //delay enabling command buttons under render is completed

      var $select2 = $('.select2').select2();

      //Here, for long strings, space-separation is performed every 50 characters to ensure line breaks.
      //You can change the length according to your needs.
      $('.select2 option').each(function () {
        var myStr = $(this).text();
        var newStr = myStr;
        if (myStr.length > 50) {
          newStr = myStr.match(/.{1,50}/g).join(' ');
        }
        $(this).text(newStr);
      });
    })
  </script>
}
