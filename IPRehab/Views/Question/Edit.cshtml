@model QuestionHierarchy

@{
  ViewData["Title"] = $"{Model.StageTitle}";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

@* save button *@
@if (!Model.ReadOnly)
{
  <div>
    <div class="mdc-touch-target-wrapper">
      <button class="mdc-button mdc-button--raised mdc-button--touch rotate" id="submit" disabled>
        <div class="mdc-button__ripple"></div>
        <span class="mdc-button__label">Save</span>
        <div class="mdc-button__touch"></div>
      </button>
    </div>
  </div>
}
<nav>
  @await Html.PartialAsync("_QuestionTabs", null, new ViewDataDictionary(ViewData) {
    { "sectionInfo", Model.Sections },
    { "readOnly", Model.ReadOnly }
  })
</nav>

<article class="paddingTop">
  <div class="flex-container-evenly-justified fixedTop">
    <div class="flex-container-evenly-justified">
      <div class="pageTitle">@Model.StageTitle</div>
      <span class="badge @Model.ModeColorCssClass">@Model.CurrentAction</span>
    </div>
    <div class="flex-container-evenly-justified">
      @{await Html.RenderPartialAsync("_RehabActionBtns", Model.ActionButtons);}
      &nbsp;
      <a asp-controller="Patient" asp-action="Index" class="btn-sm btn-secondary">Paients List</a>
    </div>
    <span class="text-center patientName">@Model.PatientName</span>
    <div style="width:30px"></div>
  </div>

  @* icon legend *@
  <div class="flex-nowrap">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
      <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
      <title>Anser is required</title>
    </svg> Answer is required
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-key-fill keyQuestion" viewBox="0 0 16 16">
      <path d="M3.5 11.5a3.5 3.5 0 1 1 3.163-5H14L15.5 8 14 9.5l-1-1-1 1-1-1-1 1-1-1-1 1H6.663a3.5 3.5 0 0 1-3.163 2zM2.5 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2z" />
      <title>Key question</title>
    </svg> Key question
  </div>

  <form method="post" enctype="multipart/form-data" asp-action="Edit" id="userAnswerForm" name="userAnswerForm">
    <input type="hidden" value="@Model.StageTitle" />
    <input type="hidden" value="@Model.EpisodeID" />

    <div class="flex-start-column-nowrap">
      @if (Model.StageTitle == "Full" || Model.StageTitle == "All")
      {
        @*form name row*@
        <div id="nonPaddinRow">
          <div class="flex-end-row-nowrap formName">@Model.StageTitle</div>
        </div>
      }

      @foreach (SectionInfo si in Model.Sections)
      {
        List<QuestionGroup> theseGroups = si.QuestionGroups;

        @*section*@
        <div class="questionSection">
          <div class="section-title">
            <a name="@si.SectionKey"></a>
            @si.SectionTitle
            @if (!string.IsNullOrEmpty(si.SectionInstruction))
            {
              <div class="sectionInstruction">
                @* instruction icon*@
                <div class="sectionInstruction">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle instructionIcon" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                    <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z" />
                    <title>Section Instruction</title>
                  </svg>
                  @si.SectionInstruction
                </div>
              </div>
            }
          </div>
          @foreach (var thisGroup in theseGroups)
          {
            bool hasKeyQuestions = thisGroup.Questions.Any(q => q.KeyQuestion.HasValue && q.KeyQuestion.Value == true);
            bool hasRequiredQuestions = thisGroup.Questions.Any(q => q.Required.HasValue);
            bool aggregateAfterThis = false;
            string aggregateType = string.Empty;
            int controlCounter = 0;

            @*question*@
            <div class="flex-start-row-nowrap questionRow">
              @* cell for question text *@
              <div class="questionText2">
                <div class="flex-start-column-nowrap">
                  @* flex columnwise for question text and question instruction *@
                  @if (hasKeyQuestions)
                  {
                    <div>
                      @* key question icon *@
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-key-fill keyQuestion" viewBox="0 0 16 16">
                        <path d="M3.5 11.5a3.5 3.5 0 1 1 3.163-5H14L15.5 8 14 9.5l-1-1-1 1-1-1-1 1-1-1-1 1H6.663a3.5 3.5 0 0 1-3.163 2zM2.5 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2z" />
                        <title>Record key</title>
                      </svg>
                      @thisGroup.SharedQuestionText
                    </div>
                  }
                  else
                  {
                    if (hasRequiredQuestions)
                    {
                      <div>
                        @* required question star icon *@
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
                          <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                          <title>Answer is required</title>
                        </svg>
                        @thisGroup.SharedQuestionText
                      </div>
                    }
                    else
                    {
                      @thisGroup.SharedQuestionText
                    }
                  }
                  @if (!string.IsNullOrEmpty(thisGroup.SharedQuestionInstruction))
                  {
                    <div>
                      @* instruction icon*@
                      <div class="questionInstruction">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle instructionIcon" viewBox="0 0 16 16">
                          <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                          <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z" />
                          <title>Instruction</title>
                        </svg>
                        @thisGroup.SharedQuestionInstruction
                      </div>
                    </div>
                  }
                </div>
              </div>

              @*cell for question key *@
              <div class="questionKey">
                @if (thisGroup.SharedQuestionKey != "AssessmentCompleted")
                {
                  @thisGroup.SharedQuestionKey
                }
              </div>

              @* cell for question key and stage group*@
              <div class="answer2">
                @foreach (var q in thisGroup.Questions)
                {
                  controlCounter++;
                  aggregateAfterThis = q.QuestionKey == si.AggregateAfterQuestionKey;

                  @* cell for question key and stage group*@
                  <div>
                    @* view component controller *@
                    @{ string viewComponentName = typeof(IPRehab.ViewComponents.IPRehabViewComponent).Name.Replace("ViewComponent", string.Empty);}
                    @await Component.InvokeAsync(viewComponentName,
                        new
                        {
                          ControlCounter = controlCounter,
                          QWS = q,
                          NetworkID = (string)ViewBag.CurrentNetworkID,
                        })
                  </div>
                }
              </div>
            </div>

            @if (aggregateAfterThis)
            {
              @*aggregate row*@
              <div class="scoreSection flex-start-column-nowrap">
                <div class="font-weight-bold">@si.AggregateType</div>
                <div class="footerInstruction flex-container-evenly-justified">
                  <div>
                    @* instruction icon *@
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle instructionIcon" viewBox="0 0 16 16">
                      <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                      <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z" />
                      <title>Instruction</title>
                    </svg>
                    @si.AggregateInstruction
                  </div>
                  <div id="@si.AggregateType" class="display-4 text-nowrap">100</div>
                </div>
              </div>
            }
          }
        </div>}
    </div>
  </form>
</article>

@section Scripts {
  @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
  <script type="module" src="~/lib/select2/js/select2.js" asp-append-version="true"></script>
  <script type="module" src="~/js/app/form.js" asp-append-version="true"></script>
}
